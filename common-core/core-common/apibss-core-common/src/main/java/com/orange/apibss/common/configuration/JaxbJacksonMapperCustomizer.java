package com.orange.apibss.common.configuration;

import java.io.IOException;

import org.joda.time.DateTime;
import org.joda.time.format.ISODateTimeFormat;
import org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer;
import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;
import org.springframework.stereotype.Component;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.datatype.joda.JodaModule;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;

/**
 * Used to register introspector for annotation generated by swagger plugin
 * 
 * @author JWCK2987
 *
 */
@Component
public class JaxbJacksonMapperCustomizer implements Jackson2ObjectMapperBuilderCustomizer {

	@Override
    public void customize(Jackson2ObjectMapperBuilder jacksonObjectMapperBuilder) {
		// JAXB annotations
		AnnotationIntrospector jaxbIntrospector = new JaxbAnnotationIntrospector(TypeFactory.defaultInstance());
		// Jackson annotations:
		AnnotationIntrospector jacksonIntrospector = new JacksonAnnotationIntrospector();
		// both jaxb and jackson annotations are available
		jacksonObjectMapperBuilder
				.annotationIntrospector(AnnotationIntrospector.pair(jaxbIntrospector, jacksonIntrospector));

        // replace for jaxb annotations with swagger-maven-pluggin
        Module module = new JodaModule().addSerializer(DateTime.class, new JsonSerializer<DateTime>() {
            @Override
            public void serialize(DateTime value, JsonGenerator gen, SerializerProvider serializers)
                    throws IOException {
                gen.writeString(ISODateTimeFormat.dateTimeNoMillis().withZoneUTC().print(value));
            }
        });
        jacksonObjectMapperBuilder.modules(module);
        jacksonObjectMapperBuilder.serializationInclusion(Include.NON_NULL);
        jacksonObjectMapperBuilder.featuresToDisable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
	}

}
