{
	"info": {
		"name": "AMEA-APIs-Generiques",
		"_postman_id": "3b14c6a1-e936-b210-6123-7bdb84acf44e",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "BillingAccount",
			"item": [
				{
					"name": "010_GET byBillingAccountId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c52dc996-a2f8-4b94-b34b-29461d7cabeb",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = JSON.parse(postman.getEnvironmentVariable(\"billingAccountSchema\"));",
									"//console.log(\"schema\", schema);",
									"",
									" var valid_schema = tv4.validateResult(jsonData, schema,false,true).valid;",
									" if (valid_schema){",
									"  tests[\"JSON Response [id:\"+jsonData.id+\"] has valid schema\"] = true",
									" }else{",
									"  tests[\"JSON Response [id:\"+jsonData.id+\"] has invalid schema in path [\" + tv4.validateResult(jsonData, schema,false,true).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema,false,true).error.message] = false;",
									" }",
									"",
									"tests['Correct ID'] = jsonData.id === postman.getEnvironmentVariable(\"baId\");",
									"",
									"var reference = JSON.parse(postman.getEnvironmentVariable(\"reference_billingAccount\"));",
									"//console.log(\"refResponseIndividual\", refResponseIndividual);",
									"tests[\"GET Body Response equals Reference Response\"] = _.isEqual(jsonData,reference); ",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{context_billingAccount}}/billingAccount/{{baId}}"
					},
					"response": []
				},
				{
					"name": "020_GET byBillingAccount Err unknow baId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Error code is 4040\"] = jsonData.code === 4040;",
									"tests[\"Error message\"] = jsonData.message.has(\"Not found\");",
									"tests[\"Error description\"] = jsonData.description.has(\"No Billing account found with id: \"+postman.getEnvironmentVariable(\"baIdUnknown\"));",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{context_billingAccount}}/billingAccount/{{baIdUnknown}}"
					},
					"response": []
				},
				{
					"name": "030_FIND byPartyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc3c410e-6194-43fc-b8d4-48650e2ae356",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"console.log(\"response\", jsonData);",
									"var schema = JSON.parse(postman.getEnvironmentVariable(\"billingAccountSchema\"));",
									"//console.log(\"schema\", schema);",
									"_.forEach(jsonData, function(dataItem){",
									" var valid_schema = tv4.validateResult(dataItem, schema, false, true).valid;",
									" if (valid_schema){",
									"  tests[\"JSON Response [id:\"+dataItem.id+\"] has valid schema\"] = true",
									" }else{",
									"  tests[\"JSON Response [id:\"+dataItem.id+\"] has invalid schema in path [\" + tv4.validateResult(dataItem, schema, false, true).error.dataPath + \"] Error: \"+ tv4.validateResult(dataItem, schema, false, true).error.message] = false;",
									" }",
									"});",
									"",
									"var liste = _(jsonData).flatten().filter({id : postman.getEnvironmentVariable(\"baIdbyPartyId\")}).value();",
									"//console.log(\"liste\",  liste);",
									"//console.log(\"liste size\",  _.size(liste));",
									"tests['Correct ID'] = _.size(liste) > 0;",
									"",
									"var reference = JSON.parse(postman.getEnvironmentVariable(\"reference_billingAccount\"));",
									"//console.log(\"reference\", reference);",
									"tests[\"The result of byBillingAccountId is included in the result list returned byPartyId\"] = _.find(jsonData,reference);",
									"    "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_billingAccount}}/billingAccount?party.id={{baPartyId}}",
							"host": [
								"{{context_billingAccount}}"
							],
							"path": [
								"billingAccount"
							],
							"query": [
								{
									"key": "party.id",
									"value": "{{baPartyId}}",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "040_FIND byPartyId Err unknow party Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"is empty\"] = _.isEmpty(jsonData);",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_billingAccount}}/billingAccount?party.id={{baPartyIdUnknown}}",
							"host": [
								"{{context_billingAccount}}"
							],
							"path": [
								"billingAccount"
							],
							"query": [
								{
									"key": "party.id",
									"value": "{{baPartyIdUnknown}}",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "050_FIND byMsisdn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34f75838-1bc7-4681-8e2a-c8472cbb0fc2",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = JSON.parse(postman.getEnvironmentVariable(\"billingAccountSchema\"));",
									"//console.log(\"schema\", schema);",
									"",
									"_.forEach(jsonData, function(dataItem){",
									" var valid_schema = tv4.validateResult(dataItem, schema, false, true).valid;",
									" if (valid_schema){",
									"  tests[\"JSON Response [id:\"+dataItem.id+\"] has valid schema\"] = true",
									" }else{",
									"  tests[\"JSON Response [id:\"+dataItem.id+\"] has invalid schema in path [\" + tv4.validateResult(dataItem, schema, false, true).error.dataPath + \"] Error: \"+ tv4.validateResult(dataItem, schema, false, true).error.message] = false;",
									" }",
									"});",
									"",
									"var liste = _(jsonData).flatten().filter({id : postman.getEnvironmentVariable(\"baId\")}).value();",
									"//var liste = _(inventories).map('relatedParty').flatten().filter({role : \"HDHDHF\"}).value();",
									"//console.log(\"liste\",  liste);",
									"//console.log(\"liste size\",  _.size(liste));",
									"tests['Correct ID'] = _.size(liste) > 0;",
									"",
									"var reference = JSON.parse(postman.getEnvironmentVariable(\"reference_billingAccount\"));",
									"//console.log(\"reference\", reference);",
									"tests[\"The result of byBillingAccountId is included in the result list returned byMsisdnId\"] = _.find(jsonData,reference);",
									"    "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_billingAccount}}/billingAccount?publicKey={{baMsisdnValid}}",
							"host": [
								"{{context_billingAccount}}"
							],
							"path": [
								"billingAccount"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{baMsisdnValid}}",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "060_FIND byMsisdn Err unknow msisdn",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"is empty\"] = _.isEmpty(jsonData);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_billingAccount}}/billingAccount?publicKey={{baMsisdnUnknown}}",
							"host": [
								"{{context_billingAccount}}"
							],
							"path": [
								"billingAccount"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{baMsisdnUnknown}}",
									"equals": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BucketBalance",
			"item": [
				{
					"name": "GET UsageReport",
					"item": [
						{
							"name": "GET UsageReport prepaid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03df1357-a769-45c4-968e-cfb512dbc21a",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Validate array size\"] = jsonData.length === 1;",
											"var jsonDataWithoutDate = _.omit(jsonData[0],['date']);",
											"",
											"// refData should be the 1st report (not an array), without date",
											"var refData = JSON.parse(pm.environment.get(\"reference_bb_usageReport_prepaid\"));",
											"tests[\"Validate data\"] = _.isEqual(jsonDataWithoutDate,refData); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "password",
										"value": "password"
									},
									{
										"key": "login",
										"value": "login"
									},
									{
										"key": "platform",
										"value": "test"
									}
								],
								"body": {},
								"url": {
									"raw": "{{context_bucketBalance}}/usageReport?publicKey.id={{bb_msisdn_ref_prepaid}}&ratingType=prepaid",
									"host": [
										"{{context_bucketBalance}}"
									],
									"path": [
										"usageReport"
									],
									"query": [
										{
											"key": "publicKey.id",
											"value": "{{bb_msisdn_ref_prepaid}}",
											"equals": true
										},
										{
											"key": "ratingType",
											"value": "prepaid",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET UsageReport prepaid - filter on units",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e350c6c-7d48-42a3-b0eb-ba1baf54fa55",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Validate array size\"] = jsonData.length === 1;",
											"var jsonDataWithoutDate = _.omit(jsonData[0],['date']);",
											"",
											"// refData should be the 1st report (not an array)",
											"var refData = JSON.parse(pm.environment.get(\"reference_bb_usageReport_prepaid_withUnits\"));",
											"tests[\"Validate data\"] = _.isEqual(jsonDataWithoutDate,refData); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "password",
										"value": "password"
									},
									{
										"key": "login",
										"value": "login"
									},
									{
										"key": "platform",
										"value": "test"
									}
								],
								"body": {},
								"url": {
									"raw": "{{context_bucketBalance}}/usageReport?publicKey.id={{bb_msisdn_ref_prepaid}}&ratingType=prepaid&buckets.bucketBalances.unit={{bb_units}}",
									"host": [
										"{{context_bucketBalance}}"
									],
									"path": [
										"usageReport"
									],
									"query": [
										{
											"key": "publicKey.id",
											"value": "{{bb_msisdn_ref_prepaid}}",
											"equals": true
										},
										{
											"key": "ratingType",
											"value": "prepaid",
											"equals": true
										},
										{
											"key": "buckets.bucketBalances.unit",
											"value": "{{bb_units}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET UsageReport prepaid - filter with bad units",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5e02fa7-137a-41d3-8bdb-82034c25cdd8",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Validate data: no buckets\"] = _.isEmpty(jsonData[0].buckets);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "password",
										"value": "password"
									},
									{
										"key": "login",
										"value": "login"
									},
									{
										"key": "platform",
										"value": "test"
									}
								],
								"body": {},
								"url": {
									"raw": "{{context_bucketBalance}}/usageReport?publicKey.id={{bb_msisdn_ref_prepaid}}&ratingType=prepaid&buckets.bucketBalances.unit=UNKNOWN",
									"host": [
										"{{context_bucketBalance}}"
									],
									"path": [
										"usageReport"
									],
									"query": [
										{
											"key": "publicKey.id",
											"value": "{{bb_msisdn_ref_prepaid}}",
											"equals": true
										},
										{
											"key": "ratingType",
											"value": "prepaid",
											"equals": true
										},
										{
											"key": "buckets.bucketBalances.unit",
											"value": "UNKNOWN",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET UsageReport postpaid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "014a639c-5395-4edf-83a5-041053f81c04",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Validate array size\"] = jsonData.length === 1;",
											"var jsonDataWithoutDate = _.omit(jsonData[0],['date']);",
											"",
											"// refData should be the 1st report (not an array)",
											"var refData = JSON.parse(pm.environment.get(\"reference_bb_usageReport_postpaid\"));",
											"tests[\"Validate data\"] = _.isEqual(jsonDataWithoutDate,refData); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "password",
										"value": "password"
									},
									{
										"key": "login",
										"value": "login"
									},
									{
										"key": "platform",
										"value": "test"
									}
								],
								"body": {},
								"url": {
									"raw": "{{context_bucketBalance}}/usageReport?publicKey.id={{bb_msisdn_ref_postpaid}}&ratingType=postpaid",
									"host": [
										"{{context_bucketBalance}}"
									],
									"path": [
										"usageReport"
									],
									"query": [
										{
											"key": "publicKey.id",
											"value": "{{bb_msisdn_ref_postpaid}}",
											"equals": true
										},
										{
											"key": "ratingType",
											"value": "postpaid",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET UsageReport postpaid, unknown msisdn",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca923763-feb2-4719-a13b-c0f0b7fec1c7",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Empty response\"] = _.isEmpty(jsonData);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "password",
										"value": "password"
									},
									{
										"key": "login",
										"value": "login"
									},
									{
										"key": "platform",
										"value": "test"
									}
								],
								"body": {},
								"url": {
									"raw": "{{context_bucketBalance}}/usageReport?publicKey.id={{bb_msisdn_unknown}}&ratingType=postpaid",
									"host": [
										"{{context_bucketBalance}}"
									],
									"path": [
										"usageReport"
									],
									"query": [
										{
											"key": "publicKey.id",
											"value": "{{bb_msisdn_unknown}}",
											"equals": true
										},
										{
											"key": "ratingType",
											"value": "postpaid",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET UsageReport: ERR, missing ratingType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38d82151-67bb-44cc-83d4-3ffa2905b271",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
											"tests[\"message\"] = jsonData.message.has(\"Missing parameter\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Parameter ratingType is missing, null or empty\"); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "password",
										"value": "password"
									},
									{
										"key": "login",
										"value": "login"
									},
									{
										"key": "platform",
										"value": "test"
									}
								],
								"body": {},
								"url": {
									"raw": "{{context_bucketBalance}}/usageReport?publicKey.id={{bb_msisdn_ref_postpaid}}",
									"host": [
										"{{context_bucketBalance}}"
									],
									"path": [
										"usageReport"
									],
									"query": [
										{
											"key": "publicKey.id",
											"value": "{{bb_msisdn_ref_postpaid}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET CreditBucketBalanceTransaction",
					"description": "",
					"item": [
						{
							"name": "GET CreditBucketBalanceTransaction by msisdn for prepaid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a93b56b-a0c7-4124-80de-9374baf8d958",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var refData = JSON.parse(pm.environment.get(\"reference_bb_cbt_prepaid\"));",
											"tests[\"Validate data\"] = _.isEqual(jsonData,refData); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "password",
										"value": "password"
									},
									{
										"key": "login",
										"value": "login"
									},
									{
										"key": "platform",
										"value": "test"
									}
								],
								"body": {},
								"url": {
									"raw": "{{context_bucketBalance}}/creditBucketBalanceTransactions?publicKey.id={{bb_msisdn_ref_prepaid}}&date.gte=2000-01-01&ratingType=prepaid",
									"host": [
										"{{context_bucketBalance}}"
									],
									"path": [
										"creditBucketBalanceTransactions"
									],
									"query": [
										{
											"key": "publicKey.id",
											"value": "{{bb_msisdn_ref_prepaid}}",
											"equals": true
										},
										{
											"key": "date.gte",
											"value": "2000-01-01",
											"equals": true
										},
										{
											"key": "ratingType",
											"value": "prepaid",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET CreditBucketBalanceTransaction by msisdn for postpaid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "000bfddd-24b8-4334-827c-f431172c78a9",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var refData = JSON.parse(pm.environment.get(\"reference_bb_cbt_postpaid\"));",
											"tests[\"Validate data\"] = _.isEqual(jsonData,refData); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "password",
										"value": "password"
									},
									{
										"key": "login",
										"value": "login"
									},
									{
										"key": "platform",
										"value": "test"
									}
								],
								"body": {},
								"url": {
									"raw": "{{context_bucketBalance}}/creditBucketBalanceTransactions?publicKey.id={{bb_msisdn_ref_postpaid}}&date.gte=2000-01-01&ratingType=postpaid",
									"host": [
										"{{context_bucketBalance}}"
									],
									"path": [
										"creditBucketBalanceTransactions"
									],
									"query": [
										{
											"key": "publicKey.id",
											"value": "{{bb_msisdn_ref_postpaid}}",
											"equals": true
										},
										{
											"key": "date.gte",
											"value": "2000-01-01",
											"equals": true
										},
										{
											"key": "ratingType",
											"value": "postpaid",
											"equals": true
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "POST CreditBucketBalanceByVoucher",
					"description": "",
					"item": [
						{
							"name": "POST creditBucketBalanceByVoucher: ERR, missing voucher number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7962ada-1362-488a-ab8a-57f17b50d185",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
											"tests[\"message\"] = jsonData.message.has(\"Missing parameter\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Parameter number is missing, null or empty\"); ",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publicKey\": {\r\n        \"id\": \"{{bb_msisdn_ref_prepaid}}\",\r\n        \"name\": \"MSISDN\"\r\n    }\r\n}"
								},
								"url": "{{context_bucketBalance}}/creditBucketBalanceByVoucher"
							},
							"response": []
						},
						{
							"name": "POST creditBucketBalanceByVoucher: ERR, bad publicKeyName value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a9feff2-e860-4636-b087-822b3f87a61e",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4003\"] = jsonData.code === 4003;",
											"tests[\"message\"] = jsonData.message.has(\"Bad parameter value\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Bad value for parameter publicKey.name: [UNKNOWN], should be [msisdn]\"); ",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publicKey\": {\r\n        \"id\": \"{{bb_msisdn_ref_prepaid}}\",\r\n        \"name\": \"UNKNOWN\"\r\n    },\r\n    \"number\": \"1345A\"\r\n}"
								},
								"url": "{{context_bucketBalance}}/creditBucketBalanceByVoucher"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "POST CreditBucketBalanceByValue",
					"description": "",
					"item": [
						{
							"name": "POST creditBucketBalanceByValue: ERR, missing value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "086fe658-7434-43f3-b064-e07d113256f8",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
											"tests[\"message\"] = jsonData.message.has(\"Missing parameter\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Parameter value is missing, null or empty\"); ",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publicKey\": {\r\n        \"id\": \"{{bb_msisdn_ref_prepaid}}\",\r\n        \"name\": \"MSISDN\"\r\n    }\r\n}"
								},
								"url": "{{context_bucketBalance}}/creditBucketBalanceByValue"
							},
							"response": []
						},
						{
							"name": "POST creditBucketBalanceByValue: ERR, bad publicKeyName value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a9feff2-e860-4636-b087-822b3f87a61e",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4003\"] = jsonData.code === 4003;",
											"tests[\"message\"] = jsonData.message.has(\"Bad parameter value\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Bad value for parameter publicKey.name: [UNKNOWN], should be [msisdn]\"); ",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publicKey\": {\r\n        \"id\": \"{{bb_msisdn_ref_prepaid}}\",\r\n        \"name\": \"UNKNOWN\"\r\n    },\r\n    \"value\": \"20.0\"\r\n}"
								},
								"url": "{{context_bucketBalance}}/creditBucketBalanceByValue"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "CustomerBill",
			"item": [
				{
					"name": "010_Find : ERR , without parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response code is 4005\"] = jsonData.code === 4005;",
									"tests[\"message\"] = jsonData.message.has(\"Bad parameter combination\");",
									"// order of parameters sometimes change",
									"tests[\"Error description\"] = jsonData.description.has(\"One or many parameters required from combination\");",
									"tests[\"Error description\"] = jsonData.description.has(\"[relatedParty.id]\");",
									"tests[\"Error description\"] = jsonData.description.has(\"[publicKey]\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{context_customerBill}}/customerBill"
					},
					"response": []
				},
				{
					"name": "011_Find : ERR , missing publicKey",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response code is 4003\"] = jsonData.code === 4003;",
									"tests[\"message\"] = jsonData.message.has(\"Bad parameter value\");",
									"tests[\"Error description\"] = jsonData.description.has(\"Bad value for parameter publicKey: [null]\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_customerBill}}/customerBill?publicKey=&billDate.gte=1999-01-01",
							"host": [
								"{{context_customerBill}}"
							],
							"path": [
								"customerBill"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "",
									"equals": true
								},
								{
									"key": "billDate.gte",
									"value": "1999-01-01",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "012_Find : ERR , invalid limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response code is 4002\"] = jsonData.code === 4002;",
									"tests[\"message\"] = jsonData.message.has(\"Bad parameter format\");",
									"tests[\"Error description\"] = jsonData.description.has(\"Bad format for parameter limit: [\"+postman.getEnvironmentVariable(\"cb_badLimit\")+\"], must be Integer\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_customerBill}}/customerBill?publicKey={{cb_msisdn}}&limit={{cb_badLimit}}",
							"host": [
								"{{context_customerBill}}"
							],
							"path": [
								"customerBill"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{cb_msisdn}}",
									"equals": true
								},
								{
									"key": "limit",
									"value": "{{cb_badLimit}}",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "013_Find : ERR , invalid endDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response code is 4002\"] = jsonData.code === 4002;",
									"tests[\"message\"] = jsonData.message.has(\"Bad parameter format\");",
									"tests[\"Error description\"] = jsonData.description.has(\"Bad format for parameter endDate: [\"+postman.getEnvironmentVariable(\"cb_invalidDate\")+\"], must be Date\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_customerBill}}/customerBill?publicKey={{cb_msisdn}}&billDate.lte={{cb_invalidDate}}&billDate.gte=1999-01-01",
							"host": [
								"{{context_customerBill}}"
							],
							"path": [
								"customerBill"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{cb_msisdn}}",
									"equals": true
								},
								{
									"key": "billDate.lte",
									"value": "{{cb_invalidDate}}",
									"equals": true
								},
								{
									"key": "billDate.gte",
									"value": "1999-01-01",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "014_Find : ERR , invalid startDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response code is 4002\"] = jsonData.code === 4002;",
									"tests[\"message\"] = jsonData.message.has(\"Bad parameter format\");",
									"tests[\"Error description\"] = jsonData.description.has(\"Bad format for parameter startDate: [\"+postman.getEnvironmentVariable(\"cb_invalidDate\")+\"], must be Date\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_customerBill}}/customerBill?publicKey={{cb_msisdn}}&billDate.gte={{cb_invalidDate}}",
							"host": [
								"{{context_customerBill}}"
							],
							"path": [
								"customerBill"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{cb_msisdn}}",
									"equals": true
								},
								{
									"key": "billDate.gte",
									"value": "{{cb_invalidDate}}",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "015_Find : ERR , missing startDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
									"tests[\"message\"] = jsonData.message.has(\"Missing parameter\");",
									"tests[\"Error description\"] = jsonData.description.has(\"Parameter billDate.gte is missing, null or empty\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_customerBill}}/customerBill?publicKey={{cb_msisdn}}",
							"host": [
								"{{context_customerBill}}"
							],
							"path": [
								"customerBill"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{cb_msisdn}}",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "020_Find with msisdn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4d2e532-2fcf-4d0c-b29e-6605a5f43281",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"tests[\"retreive \"+postman.getEnvironmentVariable(\"cb_nbBillFull\")+\" bills\"] = ",
									"        _.size(jsonData) === parseInt(postman.getEnvironmentVariable(\"cb_nbBillFull\"));",
									"",
									"var reference = JSON.parse(postman.getEnvironmentVariable(\"reference_customerBill\"));",
									"//console.log(\"refResponseIndividual\", refResponseIndividual);",
									"tests[\"GET Body Response equals Reference Response\"] = _.isEqual(jsonData,reference); ",
									"",
									"",
									"pm.test(\"X-Result-Count is present\", function () {",
									"    pm.response.to.have.header(\"X-Result-Count\") == pm.variables.get(\"cb_nbBillFull\");",
									"});",
									"",
									"pm.test(\"X-Total-Count is greather than X-Result-Count\", function () {",
									"    pm.response.to.have.header(\"X-Total-Count\") >= pm.response.to.have.header(\"X-Result-Count\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_customerBill}}/customerBill?publicKey={{cb_msisdn}}&billDate.gte=1999-01-01",
							"host": [
								"{{context_customerBill}}"
							],
							"path": [
								"customerBill"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{cb_msisdn}}",
									"equals": true
								},
								{
									"key": "billDate.gte",
									"value": "1999-01-01",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "021_Find with unknown msisdn",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Empty response\"] = _.isEmpty(jsonData);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_customerBill}}/customerBill?publicKey={{cb_msisdnUnknown}}&billDate.gte=1999-01-01",
							"host": [
								"{{context_customerBill}}"
							],
							"path": [
								"customerBill"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{cb_msisdnUnknown}}",
									"equals": true
								},
								{
									"key": "billDate.gte",
									"value": "1999-01-01",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "022_Find with msisdn with limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"retreive \"+postman.getEnvironmentVariable(\"cb_validLimit\")+\" bills\"] = ",
									"        _.size(jsonData) === parseInt(postman.getEnvironmentVariable(\"cb_validLimit\"));",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_customerBill}}/customerBill?publicKey={{cb_msisdn}}&limit={{cb_validLimit}}&billDate.gte=1999-01-01",
							"host": [
								"{{context_customerBill}}"
							],
							"path": [
								"customerBill"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{cb_msisdn}}",
									"equals": true
								},
								{
									"key": "limit",
									"value": "{{cb_validLimit}}",
									"equals": true
								},
								{
									"key": "billDate.gte",
									"value": "1999-01-01",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "023_Find  with startDate and endDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"retreive \"+postman.getEnvironmentVariable(\"cb_nbBillWithDate\")+\" bills\"] = ",
									"        _.size(jsonData) === parseInt(postman.getEnvironmentVariable(\"cb_nbBillWithDate\"));",
									"        ",
									"var endDate = new Date(postman.getEnvironmentVariable(\"cb_lteDate\"));",
									"var startDate = new Date(postman.getEnvironmentVariable(\"cb_gteDate\"));",
									"_.forEach(jsonData, function(dataItem){",
									" var dateBill = new Date(dataItem.billDate);",
									" tests[\"billDate \"+dataItem.billDate+\" is OK\"] = startDate < dateBill && endDate >= dateBill;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_customerBill}}/customerBill?publicKey={{cb_msisdn}}&billDate.lte={{cb_lteDate}}&billDate.gte={{cb_gteDate}}",
							"host": [
								"{{context_customerBill}}"
							],
							"path": [
								"customerBill"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{cb_msisdn}}",
									"equals": true
								},
								{
									"key": "billDate.lte",
									"value": "{{cb_lteDate}}",
									"equals": true
								},
								{
									"key": "billDate.gte",
									"value": "{{cb_gteDate}}",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "030_Find with relatedPartyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad045975-8c60-41e5-aaeb-1e75b31c0eee",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"tests[\"retreive \"+postman.getEnvironmentVariable(\"cb_nbBillFull\")+\" bills\"] = ",
									"        _.size(jsonData) === parseInt(postman.getEnvironmentVariable(\"cb_nbBillFull\"));",
									"",
									"pm.test(\"X-Result-Count is present\", function () {",
									"    pm.response.to.have.header(\"X-Result-Count\") == pm.variables.get(\"cb_nbBillFull\");",
									"});",
									"",
									"pm.test(\"X-Total-Count is greather than X-Result-Count\", function () {",
									"    pm.response.to.have.header(\"X-Total-Count\") >= pm.response.to.have.header(\"X-Result-Count\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_customerBill}}/customerBill?relatedParty.id={{cb_relatedPartyId}}&billDate.gte=1999-01-01",
							"host": [
								"{{context_customerBill}}"
							],
							"path": [
								"customerBill"
							],
							"query": [
								{
									"key": "relatedParty.id",
									"value": "{{cb_relatedPartyId}}",
									"equals": true
								},
								{
									"key": "billDate.gte",
									"value": "1999-01-01",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "031_Find  : ERR , missing relatedPartyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4152733f-9750-4e0d-a196-7dff9e7e500f",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
									"tests[\"message\"] = jsonData.message.has(\"Missing parameter\");",
									"tests[\"Error description\"] = jsonData.description.has(\"Parameter relatedParty.id is missing, null or empty\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_customerBill}}/customerBill?relatedParty.id=&billDate.gte=1999-01-01",
							"host": [
								"{{context_customerBill}}"
							],
							"path": [
								"customerBill"
							],
							"query": [
								{
									"key": "relatedParty.id",
									"value": "",
									"equals": true
								},
								{
									"key": "billDate.gte",
									"value": "1999-01-01",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "040_Find with billId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c22dfa05-9126-4f9b-9248-736f726c44ac",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var reference = JSON.parse(postman.getEnvironmentVariable(\"reference_customerBillID\"));",
									"//console.log(\"refResponseIndividual\", refResponseIndividual);",
									"tests[\"GET Body Response equals Reference Response\"] = _.isEqual(jsonData,reference); ",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{context_customerBill}}/customerBill/{{cb_billId}}"
					},
					"response": []
				},
				{
					"name": "041_Find : ERR , unknown billId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "63467035-deaa-4425-8f88-746ae56b1692",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response code is 4040\"] = jsonData.code === 4040;",
									"tests[\"message\"] = jsonData.message.has(\"No data found\");",
									"console.log(\"There is no bill with id '\"+postman.getEnvironmentVariable(\"cb_billIdUnknown\")+\"'! Maybe you pass wrong argument to the API\");",
									"tests[\"Error description\"] = jsonData.description.has(\"There is no bill with id '\"+postman.getEnvironmentVariable(\"cb_billIdUnknown\")+\"'! Maybe you pass wrong argument to the API\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{context_customerBill}}/customerBill/{{cb_billIdUnknown}}"
					},
					"response": []
				},
				{
					"name": "042_Find : ERR , non numeric billId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b69c7aa-a3e2-43ea-a6f7-188a11179112",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response code is 4002\"] = jsonData.code === 4002;",
									"tests[\"message\"] = jsonData.message.has(\"Bad parameter format\");",
									"console.log(\"There is no bill with id '\"+postman.getEnvironmentVariable(\"cb_billIdUnknown\")+\"'! , Maybe you pass wrong argument to the API\");",
									"tests[\"Error description\"] = jsonData.description.has(\"Bad format for parameter customerBill id: [\"+postman.getEnvironmentVariable(\"cb_billIdNonNumeric\")+\"], must be a numeric value\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{context_customerBill}}/customerBill/{{cb_billIdNonNumeric}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Party",
			"item": [
				{
					"name": "010_Find Individual : Err Missing query parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response code is 4000\"] = jsonData.code === 4000;",
									"tests[\"message\"] = jsonData.message.has(\"Bad request\");",
									"tests[\"Error description\"] = jsonData.description.has(\"Missing search criteria: givenName, familyName or email\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{context_party}}/individual"
					},
					"response": []
				},
				{
					"name": "020_Find individuals with givenName",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"//console.log(\" nb dossier\", _.size(jsonData));",
									"tests[\"givenName=\"+postman.getEnvironmentVariable(\"party_givenName_1\")+\" retreive \"+postman.getEnvironmentVariable(\"party_nbDossier_G1\")+\" dossiers\"] = ",
									"        _.size(jsonData) === parseInt(postman.getEnvironmentVariable(\"party_nbDossier_G1\"));",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_party}}/individual?givenName={{party_givenName_1}}",
							"host": [
								"{{context_party}}"
							],
							"path": [
								"individual"
							],
							"query": [
								{
									"key": "givenName",
									"value": "{{party_givenName_1}}",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "030_Find individuals with invalid givenName",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Response is empty for givenName=\"+postman.getEnvironmentVariable(\"party_invalidGivenName\")] = _.isEmpty(jsonData);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_party}}/individual?givenName={{party_invalidGivenName}}",
							"host": [
								"{{context_party}}"
							],
							"path": [
								"individual"
							],
							"query": [
								{
									"key": "givenName",
									"value": "{{party_invalidGivenName}}",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "040_Find individuals with familyName",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"familyName=\"+postman.getEnvironmentVariable(\"party_familyName\")+\" retreive \"+postman.getEnvironmentVariable(\"party_nbDossier_F\")+\" dossiers\"] = ",
									"        _.size(jsonData) === parseInt(postman.getEnvironmentVariable(\"party_nbDossier_F\"));",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_party}}/individual?familyName={{party_familyName}}",
							"host": [
								"{{context_party}}"
							],
							"path": [
								"individual"
							],
							"query": [
								{
									"key": "familyName",
									"value": "{{party_familyName}}",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "050_Find individuals with givenName and lastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"givenName=\"+postman.getEnvironmentVariable(\"party_givenName_1\")+\" and familyName=\"+postman.getEnvironmentVariable(\"party_familyName\")+\" retreive \"+postman.getEnvironmentVariable(\"party_nbDossier_G1_F\")+\" dossiers\"] = ",
									"        _.size(jsonData) === parseInt(postman.getEnvironmentVariable(\"party_nbDossier_G1_F\"));",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_party}}/individual?givenName={{party_givenName_1}}&familyName={{party_familyName}}",
							"host": [
								"{{context_party}}"
							],
							"path": [
								"individual"
							],
							"query": [
								{
									"key": "givenName",
									"value": "{{party_givenName_1}}",
									"equals": true
								},
								{
									"key": "familyName",
									"value": "{{party_familyName}}",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "060_Get individual with partyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = JSON.parse(postman.getEnvironmentVariable(\"schema_partyIndividual\"));",
									"//console.log(\"schema\", schema);",
									"var valid_schema = tv4.validateResult(jsonData, schema,false,true).valid;",
									"if (valid_schema){",
									"tests[\"JSON Response has valid schema\"] = true",
									"}else{",
									"tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema,false,true).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema,false,true).error.message] = false;",
									"}",
									"",
									"var refResponseIndividual = JSON.parse(postman.getEnvironmentVariable(\"reference_partyIndividual\"));",
									"//console.log(\"refResponseIndividual\", refResponseIndividual);",
									"tests[\"GET Body Response equals Reference Response\"] = _.isEqual(jsonData,refResponseIndividual); ",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{context_party}}/individual/{{party_partyId}}"
					},
					"response": []
				},
				{
					"name": "070_Get individual with unknow PartyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Error code is 4040\"] = jsonData.code === 4040;",
									"tests[\"Error message\"] = jsonData.message.has(\"Not found\");",
									"tests[\"Error description\"] = jsonData.description.has(\"Unknown id [\"+postman.getEnvironmentVariable(\"party_unknowPartyId\")+\"] for party\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{context_party}}/individual/{{party_unknowPartyId}}"
					},
					"response": []
				},
				{
					"name": "100_PUT individual  Err  missing id parameter in query",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response code is 5000\"] = jsonData.code === 5000;",
									"tests[\"Error description\"] = jsonData.description.has(\"Request method 'PUT' not supported\");"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{context_party}}/individual/"
					},
					"response": []
				},
				{
					"name": "110_PUT individual Err Update Party without  body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Error code is 4002\"] = jsonData.code === 4002;",
									"tests[\"Error message\"] = jsonData.message.has(\"Bad parameter format\");",
									"tests[\"Error description\"] = jsonData.description.has(\"Required request body is missing\");"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{context_party}}/individual/{{party_updatePartyId}}"
					},
					"response": []
				},
				{
					"name": "120_PUT individual Err unknow Party",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Error code is 4040\"] = jsonData.code === 4040;",
									"tests[\"Error message\"] = jsonData.message.has(\"Not found\");",
									"tests[\"Error description\"] = jsonData.description.has(\"Unknown id [\"+postman.getEnvironmentVariable(\"party_unknowPartyId\")+\"] for party\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{party_body_update1}}\r\n"
						},
						"url": "{{context_party}}/individual/{{party_unknowPartyId}}"
					},
					"response": []
				},
				{
					"name": "130_PUT individual Err invalid title value",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Error code is 4003\"] = jsonData.code === 4003;",
									"tests[\"Error message\"] = jsonData.message.has(\"Bad parameter value\");",
									"tests[\"Error description\"] = jsonData.description.has(\"Bad value for parameter title:\");",
									"    "
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{party_invalideBody_update}}\r\n"
						},
						"url": "{{context_party}}/individual/{{party_updatePartyId}}"
					},
					"response": []
				},
				{
					"name": "140_PUT 1er update individual",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var response = JSON.parse(responseBody)",
									"var reference = JSON.parse(postman.getEnvironmentVariable(\"party_body_update1\"));",
									"//console.log(\"response\"+JSON.stringify(response));",
									"//console.log(\"reference\"+reference);",
									"tests[\"party is updated\"] = _.isEqual(response,reference);",
									"    "
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{party_body_update1}}\r\n"
						},
						"url": "{{context_party}}/individual/{{party_updatePartyId}}"
					},
					"response": []
				},
				{
					"name": "150_PUT 2ieme update individual",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var response = JSON.parse(responseBody)",
									"var reference = JSON.parse(postman.getEnvironmentVariable(\"party_response_update2\"));",
									"//console.log(\"response\"+JSON.stringify(response));",
									"//console.log(\"reference\"+reference);",
									"tests[\"id is still \"+postman.getEnvironmentVariable(\"party_updatePartyId\")+\" and not update in \"+postman.getEnvironmentVariable(\"party_unknowPartyId\")] = ",
									"            _.isEqual(response.id , postman.getEnvironmentVariable(\"party_updatePartyId\"));",
									"tests[\"party is updated\"] = _.isEqual(response,reference);",
									"    "
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{party_body_update2}}\r\n"
						},
						"url": "{{context_party}}/individual/{{party_updatePartyId}}"
					},
					"response": []
				},
				{
					"name": "160_PUT update individual RollBack",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var response = JSON.parse(responseBody)",
									"var reference = JSON.parse(postman.getEnvironmentVariable(\"party_body_update1\"));",
									"//console.log(\"response\"+JSON.stringify(response));",
									"//console.log(\"reference\"+reference);",
									"tests[\"party is updated\"] = _.isEqual(response,reference);",
									"    "
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{party_body_update1}}\r\n"
						},
						"url": "{{context_party}}/individual/{{party_updatePartyId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "ProductCatalog",
			"item": [
				{
					"name": "GET productOffering - parameterConfiguration",
					"item": [
						{
							"name": "010_Get by productOfferingId : ERR, unknown operationType",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4002\"] = jsonData.code === 4002;",
											"tests[\"message\"] = jsonData.message.has(\"Bad parameter format\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Bad format for parameter operationType: [\"+postman.getEnvironmentVariable(\"pc_operationType_Unknown\")+\"], must be one of ProductOfferOperationTypeEnum enum values: [migrationFrom, compatibilityWith, parameterConfiguration]\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_catalog}}/productOffering/{{pc_pOfferingId_ref}}?operationType={{pc_operationType_Unknown}}",
									"host": [
										"{{context_catalog}}"
									],
									"path": [
										"productOffering",
										"{{pc_pOfferingId_ref}}"
									],
									"query": [
										{
											"key": "operationType",
											"value": "{{pc_operationType_Unknown}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "011_Get by productOfferingId : ERR, bad operationType",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4003\"] = jsonData.code === 4003;",
											"tests[\"message\"] = jsonData.message.has(\"Bad parameter value\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Bad value for parameter operationType: [compatibilityWith], should be [parameterConfiguration]\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_catalog}}/productOffering/{{pc_pOfferingId_ref}}?operationType=compatibilityWith",
									"host": [
										"{{context_catalog}}"
									],
									"path": [
										"productOffering",
										"{{pc_pOfferingId_ref}}"
									],
									"query": [
										{
											"key": "operationType",
											"value": "compatibilityWith",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "012_Get by productOfferingId : ERR, unknown productOfferingID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4040\"] = jsonData.code === 4040;",
											"tests[\"message\"] = jsonData.message.has(\"Not found\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Unknown id [\"+postman.getEnvironmentVariable(\"pc_unknowed_pOfferingId\")+\"] for ProductOffering\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_catalog}}/productOffering/{{pc_unknowed_pOfferingId}}?operationType=parameterConfiguration",
									"host": [
										"{{context_catalog}}"
									],
									"path": [
										"productOffering",
										"{{pc_unknowed_pOfferingId}}"
									],
									"query": [
										{
											"key": "operationType",
											"value": "parameterConfiguration",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "020_Get by productOfferingId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "944082b2-15f9-4ed1-b8bc-c7d411387f27",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"/*",
											"var schema=JSON.parse(postman.getEnvironmentVariable(\"schema_productCatalog\"));",
											"",
											"var valid_schema = tv4.validateResult(jsonData, schema, false, true).valid;",
											"if (valid_schema){",
											" tests[\"JSON Response [id:\"+jsonData.id+\"] has valid schema\"] = true;",
											"}else{",
											" tests[\"JSON Response [id:\"+jsonData.id+\"] has invalid schema in path [\" + tv4.validateResult(jsonData, schema, false, true).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema, false, true).error.message] = false;",
											"}",
											"*/",
											"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pc_paramConfiguration\"));",
											"tests[\"Validate data\"] = _.isEqual(jsonData,refData); ",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_catalog}}/productOffering/{{pc_pOfferingId_ref}}?operationType=parameterConfiguration",
									"host": [
										"{{context_catalog}}"
									],
									"path": [
										"productOffering",
										"{{pc_pOfferingId_ref}}"
									],
									"query": [
										{
											"key": "operationType",
											"value": "parameterConfiguration",
											"equals": true
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "FIND productOffering",
					"item": [
						{
							"name": "UC - migrationFrom",
							"item": [
								{
									"name": "010_Find productOffering : ERR, missing operationType",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 400\"] = responseCode.code === 400;",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
													"tests[\"message\"] = jsonData.message.has(\"Missing paramete\");",
													"tests[\"Error description\"] = jsonData.description.has(\"Parameter operationType is missing, null or empty\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "login",
												"value": "{{headers_login}}"
											},
											{
												"key": "password",
												"value": "{{headers_password}}"
											},
											{
												"key": "platform",
												"value": "{{headers_platform}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{context_catalog}}/productOffering?offerProductOfferingId={{pc_offerProductOfferingId}}",
											"host": [
												"{{context_catalog}}"
											],
											"path": [
												"productOffering"
											],
											"query": [
												{
													"key": "offerProductOfferingId",
													"value": "{{pc_offerProductOfferingId}}",
													"equals": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "011_Find productOffering : ERR, unknown operationType",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 400\"] = responseCode.code === 400;",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Response code is 4002\"] = jsonData.code === 4002;",
													"tests[\"message\"] = jsonData.message.has(\"Bad parameter format\");",
													"tests[\"Error description\"] = jsonData.description.has(\"Bad format for parameter operationType: [\"+postman.getEnvironmentVariable(\"pc_operationType_Unknown\")+\"], must be one of ProductOfferOperationTypeEnum enum values: [migrationFrom, compatibilityWith, parameterConfiguration]\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "login",
												"value": "{{headers_login}}"
											},
											{
												"key": "password",
												"value": "{{headers_password}}"
											},
											{
												"key": "platform",
												"value": "{{headers_platform}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{context_catalog}}/productOffering?offerProductOfferingId={{pc_offerProductOfferingId}}&operationType={{pc_operationType_Unknown}}",
											"host": [
												"{{context_catalog}}"
											],
											"path": [
												"productOffering"
											],
											"query": [
												{
													"key": "offerProductOfferingId",
													"value": "{{pc_offerProductOfferingId}}",
													"equals": true
												},
												{
													"key": "operationType",
													"value": "{{pc_operationType_Unknown}}",
													"equals": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "012_Find productOffering : ERR, missing offerProductOfferingId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae71142f-a0e5-4a76-b4d3-b053323819f4",
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 400\"] = responseCode.code === 400;",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
													"tests[\"message\"] = jsonData.message.has(\"Missing parameter\");",
													"tests[\"Error description\"] = jsonData.description.has(\"Parameter offerProductOfferingId is missing, null or empty\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "login",
												"value": "{{headers_login}}"
											},
											{
												"key": "password",
												"value": "{{headers_password}}"
											},
											{
												"key": "platform",
												"value": "{{headers_platform}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{context_catalog}}/productOffering?operationType=migrationFrom",
											"host": [
												"{{context_catalog}}"
											],
											"path": [
												"productOffering"
											],
											"query": [
												{
													"key": "operationType",
													"value": "migrationFrom",
													"equals": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "013_Find productOffering : unknown productOfferingId",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests[\"Empty result\"] = _.isEmpty(jsonData);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "login",
												"value": "{{headers_login}}"
											},
											{
												"key": "password",
												"value": "{{headers_password}}"
											},
											{
												"key": "platform",
												"value": "{{headers_platform}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{context_catalog}}/productOffering?offerProductOfferingId={{pc_offerProductOfferingId_unknown}}&operationType=migrationFrom",
											"host": [
												"{{context_catalog}}"
											],
											"path": [
												"productOffering"
											],
											"query": [
												{
													"key": "offerProductOfferingId",
													"value": "{{pc_offerProductOfferingId_unknown}}",
													"equals": true
												},
												{
													"key": "operationType",
													"value": "migrationFrom",
													"equals": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "020_Find productOffering migrationFrom",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ac45c55-8f9d-42b4-950f-da03fb0866d2",
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"/*",
													"var schema=JSON.parse(postman.getEnvironmentVariable(\"schema_productCatalog\"));",
													"",
													"_.forEach(jsonData, function(dataItem){",
													" var valid_schema = tv4.validateResult(dataItem, schema, false, true).valid;",
													" if (valid_schema){",
													"  tests[\"JSON Response [id:\"+dataItem.id+\"] has valid schema\"] = true",
													" }else{",
													"  tests[\"JSON Response [id:\"+dataItem.id+\"] has invalid schema in path [\" + tv4.validateResult(dataItem, schema, false, true).error.dataPath + \"] Error: \"+ tv4.validateResult(dataItem, schema, false, true).error.message] = false;",
													" }",
													"});",
													"*/",
													"// valid data avec la reference",
													"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pc_migrationFrom\"));",
													"tests[\"Validate data\"] = _.isEqual(jsonData,refData); ",
													"",
													"",
													"",
													"",
													"",
													"/*pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.value).to.eql(100);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.value).to.eql(100);",
													"});*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "login",
												"value": "{{headers_login}}"
											},
											{
												"key": "password",
												"value": "{{headers_password}}"
											},
											{
												"key": "platform",
												"value": "{{headers_platform}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{context_catalog}}/productOffering?offerProductOfferingId={{pc_offerProductOfferingId}}&operationType=migrationFrom",
											"host": [
												"{{context_catalog}}"
											],
											"path": [
												"productOffering"
											],
											"query": [
												{
													"key": "offerProductOfferingId",
													"value": "{{pc_offerProductOfferingId}}",
													"equals": true
												},
												{
													"key": "operationType",
													"value": "migrationFrom",
													"equals": true
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "UC - compatibilityWith",
							"item": [
								{
									"name": "010_Find productOffering : ERR, missing operationType",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 400\"] = responseCode.code === 400;",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
													"tests[\"message\"] = jsonData.message.has(\"Missing paramete\");",
													"tests[\"Error description\"] = jsonData.description.has(\"Parameter operationType is missing, null or empty\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "login",
												"value": "{{headers_login}}"
											},
											{
												"key": "password",
												"value": "{{headers_password}}"
											},
											{
												"key": "platform",
												"value": "{{headers_platform}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{context_catalog}}/productOffering?offerProductOfferingId={{pc_offerProductOfferingId}}",
											"host": [
												"{{context_catalog}}"
											],
											"path": [
												"productOffering"
											],
											"query": [
												{
													"key": "offerProductOfferingId",
													"value": "{{pc_offerProductOfferingId}}",
													"equals": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "011_Find productOffering : ERR, unknown operationType",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 400\"] = responseCode.code === 400;",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Response code is 4002\"] = jsonData.code === 4002;",
													"tests[\"message\"] = jsonData.message.has(\"Bad parameter format\");",
													"tests[\"Error description\"] = jsonData.description.has(\"Bad format for parameter operationType: [\"+postman.getEnvironmentVariable(\"pc_operationType_Unknown\")+\"], must be one of ProductOfferOperationTypeEnum enum values: [migrationFrom, compatibilityWith, parameterConfiguration]\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "login",
												"value": "{{headers_login}}"
											},
											{
												"key": "password",
												"value": "{{headers_password}}"
											},
											{
												"key": "platform",
												"value": "{{headers_platform}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{context_catalog}}/productOffering?offerProductOfferingId={{pc_offerProductOfferingId}}&operationType={{pc_operationType_Unknown}}",
											"host": [
												"{{context_catalog}}"
											],
											"path": [
												"productOffering"
											],
											"query": [
												{
													"key": "offerProductOfferingId",
													"value": "{{pc_offerProductOfferingId}}",
													"equals": true
												},
												{
													"key": "operationType",
													"value": "{{pc_operationType_Unknown}}",
													"equals": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "012_Find productOffering : ERR, missing offerProductOfferingId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a57a66ee-f947-4a89-bb5b-f59ad7a70926",
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 400\"] = responseCode.code === 400;",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
													"tests[\"message\"] = jsonData.message.has(\"Missing parameter\");",
													"tests[\"Error description\"] = jsonData.description.has(\"Parameter offerProductOfferingId is missing, null or empty\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "login",
												"value": "{{headers_login}}"
											},
											{
												"key": "password",
												"value": "{{headers_password}}"
											},
											{
												"key": "platform",
												"value": "{{headers_platform}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{context_catalog}}/productOffering?operationType=CompatibilityWith",
											"host": [
												"{{context_catalog}}"
											],
											"path": [
												"productOffering"
											],
											"query": [
												{
													"key": "operationType",
													"value": "CompatibilityWith",
													"equals": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "013_Find productOffering : unknown offerProductOfferingId",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests[\"Empty result\"] = _.isEmpty(jsonData);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "login",
												"value": "{{headers_login}}"
											},
											{
												"key": "password",
												"value": "{{headers_password}}"
											},
											{
												"key": "platform",
												"value": "{{headers_platform}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{context_catalog}}/productOffering?offerProductOfferingId={{pc_offerProductOfferingId_unknown}}&operationType=compatibilityWith",
											"host": [
												"{{context_catalog}}"
											],
											"path": [
												"productOffering"
											],
											"query": [
												{
													"key": "offerProductOfferingId",
													"value": "{{pc_offerProductOfferingId_unknown}}",
													"equals": true
												},
												{
													"key": "operationType",
													"value": "compatibilityWith",
													"equals": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "020_Find productOffering compatibilityWith",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "182ef7f6-d60a-4a8e-9203-2596785ebecf",
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"/*",
													"var schema=JSON.parse(postman.getEnvironmentVariable(\"schema_productCatalog\"));",
													"",
													"_.forEach(jsonData, function(dataItem){",
													" var valid_schema = tv4.validateResult(dataItem, schema, false, true).valid;",
													" if (valid_schema){",
													"  tests[\"JSON Response [id:\"+dataItem.id+\"] has valid schema\"] = true",
													" }else{",
													"  tests[\"JSON Response [id:\"+dataItem.id+\"] has invalid schema in path [\" + tv4.validateResult(dataItem, schema, false, true).error.dataPath + \"] Error: \"+ tv4.validateResult(dataItem, schema, false, true).error.message] = false;",
													" }",
													"});",
													"*/",
													"// valid data avec la reference",
													"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pc_compatibilityWith\"));",
													"tests[\"Validate data\"] = _.isEqual(jsonData,refData); ",
													"",
													"//Test pour chaque item si la category est bien egale à 'option'",
													"_.forEach(jsonData, function(dataItem){",
													"    pm.test(\"Category is equal to 'option'\", function () {",
													"        //console.log(\"un item\",dataItem);",
													"        pm.expect(dataItem.category[0].name).to.eql(\"option\");",
													"    });",
													"});",
													"",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "login",
												"value": "{{headers_login}}"
											},
											{
												"key": "password",
												"value": "{{headers_password}}"
											},
											{
												"key": "platform",
												"value": "{{headers_platform}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{context_catalog}}/productOffering?offerProductOfferingId={{pc_offerProductOfferingId}}&operationType=compatibilityWith",
											"host": [
												"{{context_catalog}}"
											],
											"path": [
												"productOffering"
											],
											"query": [
												{
													"key": "offerProductOfferingId",
													"value": "{{pc_offerProductOfferingId}}",
													"equals": true
												},
												{
													"key": "operationType",
													"value": "compatibilityWith",
													"equals": true
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "ProductOrder",
			"item": [
				{
					"name": "ChangeOfferStatus",
					"description": "couvre les use cases : UM46,UM107 et UM110",
					"item": [
						{
							"name": "010_Err orderItemProductId Unknown in body",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4104\"] = jsonData.code === 4104;",
											"tests[\"Error message\"] = jsonData.message.has(\"Contract state change impossible\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Impossible to change state for contract with id [\"+postman.getEnvironmentVariable(\"po_unknownProductId\")+\"]: Invalid contract id\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderItem\": [\n    {\n      \"id\": \"1\",\n      \"action\": \"activate\",\n      \"product\": {\n        \"id\": \"{{po_unknownProductId}}\",\n        \"productOffering\": {\n        \t\"category\": \"offer\"\n    \t}\n      }\n    }\n  ],\n  \"channel\": {\n    \"name\": \"Channel\"\n  }\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "020_Err orderItemProductId statut active",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4104\"] = jsonData.code === 4104;",
											"tests[\"Error message\"] = jsonData.message.has(\"Contract state change impossible\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Impossible to change state for contract with id\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderItem\": [\n    {\n      \"id\": \"1\",\n      \"action\": \"activate\",\n      \"product\": {\n        \"id\": \"{{po_productIdActive}}\",\n        \"productOffering\": {\n        \t\"category\": \"offer\"\n    \t}\n      }\n    }\n  ],\n  \"channel\": {\n    \"name\": \"Channel\"\n  }\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "030_Err Change status Pending-active to Active with invalid request date",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4003\"] = jsonData.code === 4003;",
											"tests[\"Error message\"] = jsonData.message.has(\"Bad parameter value\");",
											"tests[\"Error description\"] = jsonData.description.has(\"requestedStartDate must be must be equal or later than today\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestedStartDate\": \"2017-09-06T21:00:00Z\",\n  \"orderItem\": [\n    {\n      \"id\": \"1\",\n      \"action\": \"activate\",\n      \"product\": {\n        \"id\": \"{{po_productIdActiveDateRequest}}\",\n        \"productOffering\": {\n        \t\"category\": \"offer\"\n    \t}        \n      }\n    }\n  ],\n  \"channel\": {\n    \"name\": \"Channel\"\n  }\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "040_Change status Pending-active to Active with request date",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"var responseData = JSON.parse(responseBody)",
											"",
											"tests[\"status in acknowledged\"] = responseData.state === \"acknowledged\";",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requestedStartDate\": \"2027-09-06T21:00:00Z\",\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"activate\",\r\n      \"product\": {\r\n        \"id\": \"{{po_productIdActiveDateRequest}}\",\r\n        \"productOffering\": {\r\n        \t\"category\": \"offer\"\r\n    \t}        \r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "050_Check in ProductInventory status is PendingActive",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var inventories = JSON.parse(responseBody);",
											"",
											"var mainOffer = _.find(inventories, function(o) { return o.productOffering.category == \"offer\"; } );",
											"",
											"if(_.isEmpty(mainOffer)){",
											"    tests['main offer found'] = false;",
											"} else {",
											"    tests['main offer found'] = true;",
											"    // Test si le product portant le barring est au status AttenteActivation",
											"    tests[\"main offer Statut is '\"+postman.getEnvironmentVariable(\"pi_status_AttenteActivation\")+\"'\"] =  mainOffer.status === postman.getEnvironmentVariable(\"pi_status_AttenteActivation\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_inventory}}/product?publicKey={{po_msisdnActiveDateRequest}}",
									"host": [
										"{{context_inventory}}"
									],
									"path": [
										"product"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{po_msisdnActiveDateRequest}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "060_Err Change status with Pending request",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 500\"] = responseCode.code === 500;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 5002\"] = jsonData.code === 5002;",
											"tests[\"Error message\"] = jsonData.message.has(\"Pending request\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Contract [\"+postman.getEnvironmentVariable(\"po_productIdActiveDateRequest\")+\"] could not be updated because he has pending request(s)\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requestedStartDate\": \"2027-09-06T21:00:00Z\",\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"activate\",\r\n      \"product\": {\r\n        \"id\": \"{{po_productIdActiveDateRequest}}\",\r\n        \"productOffering\": {\r\n        \t\"category\": \"offer\"\r\n    \t}        \r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "070_Change status Pending-active to Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"var responseData = JSON.parse(responseBody)",
											"",
											"tests[\"status in progress\"] = responseData.state === \"inProgress\";",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderItem\": [\n    {\n      \"id\": \"1\",\n      \"action\": \"activate\",\n      \"product\": {\n        \"id\": \"{{po_productIdSuspendedToActive}}\",\n        \"productOffering\": {\n        \t\"category\": \"offer\"\n    \t}        \n      }\n    }\n  ],\n  \"channel\": {\n    \"name\": \"Channel\"\n  }\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "080_Check in ProductInventory status is Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var inventories = JSON.parse(responseBody);",
											"",
											"var mainOffer = _.find(inventories, function(o) { return o.productOffering.category == \"offer\"; } );",
											"",
											"if(_.isEmpty(mainOffer)){",
											"    tests['main offer found'] = false;",
											"} else {",
											"    tests['main offer found'] = true;",
											"    // Test si le product portant le barring est au status AttenteActivation",
											"    tests[\"main offer Statut is '\"+postman.getEnvironmentVariable(\"pi_status_Actif\")+\"'\"] =  mainOffer.status === postman.getEnvironmentVariable(\"pi_status_Actif\");",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_inventory}}/product?publicKey={{po_msisdnSuspendedToActive}}",
									"host": [
										"{{context_inventory}}"
									],
									"path": [
										"product"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{po_msisdnSuspendedToActive}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "090_Change status Active to Suspended",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"var responseData = JSON.parse(responseBody)",
											"",
											"tests[\"status in progress\"] = responseData.state === \"inProgress\";",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"suspend\",\r\n      \"product\": {\r\n        \"id\": \"{{po_productIdActiveToSuspended}}\",\r\n        \"productOffering\": {\r\n        \t\"category\": \"offer\"\r\n    \t}        \r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "100_Check in ProductInventory status is Suspended",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var inventories = JSON.parse(responseBody);",
											"",
											"var mainOffer = _.find(inventories, function(o) { return o.productOffering.category == \"offer\"; } );",
											"",
											"if(_.isEmpty(mainOffer)){",
											"    tests['main offer found'] = false;",
											"} else {",
											"    tests['main offer found'] = true;",
											"    // Test si le product portant le barring est au status AttenteActivation",
											"    tests[\"main offer Statut is '\"+postman.getEnvironmentVariable(\"pi_status_Suspended\")+\"'\"] =  mainOffer.status === postman.getEnvironmentVariable(\"pi_status_Suspended\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_inventory}}/product?publicKey={{po_msisdnActiveToSuspended}}",
									"host": [
										"{{context_inventory}}"
									],
									"path": [
										"product"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{po_msisdnActiveToSuspended}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "110_Change status Suspended to (re)Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"var responseData = JSON.parse(responseBody)",
											"",
											"tests[\"status in progress\"] = responseData.state === \"inProgress\";",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"reactivate\",\r\n      \"product\": {\r\n        \"id\": \"{{po_productIdSuspendedToReActivate}}\",\r\n        \"productOffering\": {\r\n        \t\"category\": \"offer\"\r\n    \t}        \r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "120_Check in ProductInventory status is Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var inventories = JSON.parse(responseBody);",
											"",
											"var mainOffer = _.find(inventories, function(o) { return o.productOffering.category == \"offer\"; } );",
											"",
											"if(_.isEmpty(mainOffer)){",
											"    tests['main offer found'] = false;",
											"} else {",
											"    tests['main offer found'] = true;",
											"    // Test si le product portant le barring est au status AttenteActivation",
											"    tests[\"main offer Statut is '\"+postman.getEnvironmentVariable(\"pi_status_Actif\")+\"'\"] =  mainOffer.status === postman.getEnvironmentVariable(\"pi_status_Actif\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_inventory}}/product?publicKey={{po_msisdnSuspendedToReActivate}}",
									"host": [
										"{{context_inventory}}"
									],
									"path": [
										"product"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{po_msisdnSuspendedToReActivate}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "130_Err Change status Suspended to Terminated",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 500\"] = responseCode.code === 500;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 5003\"] = jsonData.code === 5003;",
											"tests[\"Error message\"] = jsonData.message.has(\"Not implemented\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Function deactivate offer not implemented\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"deactivate\",\r\n      \"productOffering\": {\r\n        \"category\": \"offer\"\r\n      },\r\n      \"product\": {\r\n        \"id\": \"{{po_productIdSuspendedToTerminated}}\"\r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "140_Check in ProductInventory status is Terminated",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var inventories = JSON.parse(responseBody);",
											"",
											"var mainOffer = _.find(inventories, function(o) { return o.productOffering.category == \"offer\"; } );",
											"",
											"if(_.isEmpty(mainOffer)){",
											"    tests['main offer found'] = false;",
											"} else {",
											"    tests['main offer found'] = true;",
											"    // Test si le product portant le barring est au status AttenteActivation",
											"    tests[\"main offer Statut is '\"+postman.getEnvironmentVariable(\"pi_status_Suspended\")+\"'\"] =  mainOffer.status === postman.getEnvironmentVariable(\"pi_status_Suspended\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_inventory}}/product?publicKey={{po_msisdnSuspendedToTerminated}}",
									"host": [
										"{{context_inventory}}"
									],
									"path": [
										"product"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{po_msisdnSuspendedToTerminated}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ChangeServiceStatus",
					"item": [
						{
							"name": "010_Change status Active to Terminated",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"var responseData = JSON.parse(responseBody)",
											"",
											"tests[\"status in progress\"] = responseData.state === \"inProgress\";",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"deactivate\",\r\n      \"product\": {\r\n        \"id\": \"{{po_service_productIdActive}}|A|{{po_service_id}}\"\r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "020_Check in ProductInventory status is Terminated",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var inventories = JSON.parse(responseBody);",
											"",
											"var service = _.find(inventories, function(o) { return o.name == postman.getEnvironmentVariable(\"po_service_name\"); } );",
											"",
											"if(_.isEmpty(service)){",
											"    tests[postman.getEnvironmentVariable(\"po_service_name\")+\" service found\"] = false;",
											"} else {",
											"    tests[postman.getEnvironmentVariable(\"po_service_name\")+\" service found\"] = true;",
											"    // Test si le product portant le barring est au status AttenteActivation",
											"    tests[postman.getEnvironmentVariable(\"po_service_name\")+\" service Statut is '\"+postman.getEnvironmentVariable(\"pi_status_Terminated\")+\"'\"] =  service.status === postman.getEnvironmentVariable(\"pi_status_Terminated\");",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_inventory}}/product?publicKey={{po_service_msisdn}}",
									"host": [
										"{{context_inventory}}"
									],
									"path": [
										"product"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{po_service_msisdn}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "030_Change status Terminated to Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"var responseData = JSON.parse(responseBody)",
											"",
											"tests[\"status in progress\"] = responseData.state === \"inProgress\";",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"activate\",\r\n      \"product\": {\r\n        \"id\": \"{{po_service_productIdActive}}|A|{{po_service_id}}\"\r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "040_Check in ProductInventory status is Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var inventories = JSON.parse(responseBody);",
											"",
											"var service = _.find(inventories, function(o) { return o.name == postman.getEnvironmentVariable(\"po_service_name\"); } );",
											"",
											"if(_.isEmpty(service)){",
											"   tests[postman.getEnvironmentVariable(\"po_service_name\")+\" service found\"] = false;",
											"} else {",
											"    tests[postman.getEnvironmentVariable(\"po_service_name\")+\" service found\"] = true;",
											"    // Test si le product portant le barring est au status AttenteActivation",
											"    tests[postman.getEnvironmentVariable(\"po_service_name\")+\" service Statut is '\"+postman.getEnvironmentVariable(\"pi_status_Actif\")+\"'\"] =  service.status === postman.getEnvironmentVariable(\"pi_status_Actif\");",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_inventory}}/product?publicKey={{po_service_msisdn}}",
									"host": [
										"{{context_inventory}}"
									],
									"path": [
										"product"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{po_service_msisdn}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "050_Change status Active to Terminated with  characteristics",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"var responseData = JSON.parse(responseBody)",
											"",
											"tests[\"status in progress\"] = responseData.state === \"inProgress\";",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"deactivate\",\r\n      \"product\": {\r\n        \"id\": \"{{po_service_productIdActive}}|A|{{po_service_id}}\",\r\n        \"productCharacteristic\": [\r\n          {\r\n            \"name\": \"{{po_service_characName}}\",\r\n            \"value\": \"{{po_service_characValue1}}\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder",
								"description": "Characteristics are ignored when staus changed active to terminated"
							},
							"response": []
						},
						{
							"name": "060_Check in ProductInventory status is Terminated and caracteristic",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var inventories = JSON.parse(responseBody);",
											"",
											"var service = _.find(inventories, function(o) { return o.name == postman.getEnvironmentVariable(\"po_service_name\"); } );",
											"",
											"if(_.isEmpty(service)){",
											"    tests[postman.getEnvironmentVariable(\"po_service_name\")+\" service found\"] = false;",
											"} else {",
											"    tests[postman.getEnvironmentVariable(\"po_service_name\")+\" service found\"] = true;",
											"    // Test si le product portant le barring est au status AttenteActivation",
											"    tests[postman.getEnvironmentVariable(\"po_service_name\")+\" service Statut is '\"+postman.getEnvironmentVariable(\"pi_status_Terminated\")+\"'\"] =  service.status === postman.getEnvironmentVariable(\"pi_status_Terminated\");",
											"}",
											"/*",
											"var characteristic = _.find(service.productCharacteristic, function(o) { return o.name == postman.getEnvironmentVariable(\"po_service_characName\"); });",
											"//console.log(\"characteristic\",characteristic);",
											"if(_.isEmpty(characteristic)){",
											"    tests['characteristic found'] = false;",
											"}else{",
											"    tests['characteristic found'] = true;",
											"    tests['Characteristic value is upadated'] = characteristic.value === postman.getEnvironmentVariable(\"po_service_characValue1\");",
											"}",
											"*/",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_inventory}}/product?publicKey={{po_service_msisdn}}&withParameters=true",
									"host": [
										"{{context_inventory}}"
									],
									"path": [
										"product"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{po_service_msisdn}}",
											"equals": true
										},
										{
											"key": "withParameters",
											"value": "true",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "070_Change status Terminated to Active with characteristics",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"var responseData = JSON.parse(responseBody)",
											"",
											"tests[\"status in progress\"] = responseData.state === \"inProgress\";",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"activate\",\r\n      \"product\": {\r\n        \"id\": \"{{po_service_productIdActive}}|A|{{po_service_id}}\",\r\n        \"productCharacteristic\": [\r\n          {\r\n            \"name\": \"{{po_service_characName}}\",\r\n            \"value\": \"{{po_service_characValue2}}\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "080_Check in ProductInventory status is Active and characteristics",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var inventories = JSON.parse(responseBody);",
											"",
											"var service = _.find(inventories, function(o) { return o.name == postman.getEnvironmentVariable(\"po_service_name\"); } );",
											"",
											"if(_.isEmpty(service)){",
											"    tests[postman.getEnvironmentVariable(\"po_service_name\")+\" service found\"] = false;",
											"} else {",
											"    tests[postman.getEnvironmentVariable(\"po_service_name\")+\" service found\"] = true;",
											"    // Test si le product portant le barring est au status AttenteActivation",
											"    tests[postman.getEnvironmentVariable(\"po_service_name\")+\" service Statut is '\"+postman.getEnvironmentVariable(\"pi_status_Actif\")+\"'\"] =  service.status === postman.getEnvironmentVariable(\"pi_status_Actif\");",
											"}",
											"",
											"var characteristic = _.find(service.productCharacteristic, function(o) { return o.name == postman.getEnvironmentVariable(\"po_service_characName\"); });",
											"//console.log(\"characteristic\",characteristic);",
											"if(_.isEmpty(characteristic)){",
											"    tests['characteristic found'] = false;",
											"}else{",
											"    tests['characteristic found'] = true;",
											"    tests['Characteristic value is upadated'] = characteristic.value === postman.getEnvironmentVariable(\"po_service_characValue2\");",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_inventory}}/product?publicKey={{po_service_msisdn}}&withParameters=true",
									"host": [
										"{{context_inventory}}"
									],
									"path": [
										"product"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{po_service_msisdn}}",
											"equals": true
										},
										{
											"key": "withParameters",
											"value": "true",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "100_Err Change status invalid transition",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4102\"] = jsonData.code === 4102;",
											"tests[\"Error message\"] = jsonData.message.has(\"Service state change impossible\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Invalid status transition for service with id\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"activate\",\r\n      \"product\": {\r\n        \"id\": \"{{po_service_productIdActive}}|A|{{po_service_id}}\"\r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "110_Err Change status invalid id for service",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4002\"] = jsonData.code === 4002;",
											"tests[\"Error message\"] = jsonData.message.has(\"Bad parameter format\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Bad format for parameter orderItem.product.id\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"deactivate\",\r\n      \"product\": {\r\n        \"id\": \"{{po_service_productIdInvalid}}|{{po_service_idInvalid}}\",\r\n        \"productCharacteristic\": [\r\n          {\r\n            \"name\": \"{{po_service_characName}}\",\r\n            \"value\": \"{{po_service_characValue2}}\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "120_Err Change status contract unknown",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4102\"] = jsonData.code === 4102;",
											"tests[\"Error message\"] = jsonData.message.has(\"Service state change impossible\");",
											"tests[\"Error description\"] = jsonData.description.has(\"No contract found with id\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"activate\",\r\n      \"product\": {\r\n        \"id\": \"{{po_service_productIdUnknown}}|A|{{po_service_id}}\"\r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "130_Err Change status no service contained in main offer",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4102\"] = jsonData.code === 4102;",
											"tests[\"Error message\"] = jsonData.message.has(\"Service state change impossible\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Service not in contract for service with id\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"activate\",\r\n      \"product\": {\r\n        \"id\": \"{{po_service_productIdActive}}|A|{{po_service_idUnknown}}\"\r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "140_Err Change status contract no active state",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4102\"] = jsonData.code === 4102;",
											"tests[\"Error message\"] = jsonData.message.has(\"Service state change impossible\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Contract is not in active state for service with id [\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"activate\",\r\n      \"product\": {\r\n        \"id\": \"{{po_service_productIdNotActive}}|A|{{po_service_id}}\"\r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Add service",
					"item": [
						{
							"name": "010_Err Add service : missing productOffering",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c9a14d1-7cba-4884-a05d-e14ab3a66ccb",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4001\"] = jsonData.code === 4001;",
											"tests[\"Error message\"] = jsonData.message.has(\"Missing parameter\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Parameter orderItem.productOffering.id is missing, null or empty\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderItem\": [\n    {\n      \"id\": \"1\",\n      \"action\": \"add\",\n      \"product\": {\n        \"productRelationship\": [\n          {\n            \"type\": \"isContainedIn\",\n            \"product\": {\n              \"id\": \"{{po_addService_productId}}|C|{{po_addService_packageId}}\"\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"channel\": {\n    \"name\": \"Channel\"\n  }\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "020_Err Add service : service already exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4105\"] = jsonData.code === 4105;",
											"tests[\"Error message\"] = jsonData.message.has(\"Service add impossible\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Service already assigned to contract for service with id \");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderItem\": [\n    {\n      \"id\": \"1\",\n      \"action\": \"add\",\n      \"productOffering\": {\n        \"id\": \"{{po_addService_id_alreadyExist}}\"\n      },\n      \"product\": {\n        \"productRelationship\": [\n          {\n            \"type\": \"isContainedIn\",\n            \"product\": {\n              \"id\": \"{{po_addService_productId}}|C|{{po_addService_packageId_alreadyExist}}\"\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"channel\": {\n    \"name\": \"Channel\"\n  }\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "030_Err Add service : service suspended",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4105\"] = jsonData.code === 4105;",
											"tests[\"Error message\"] = jsonData.message.has(\"Service add impossible\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Contract is not in pending_active or active state for service with id [\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderItem\": [\n    {\n      \"id\": \"1\",\n      \"action\": \"add\",\n      \"productOffering\": {\n        \"id\": \"{{po_addService_id_suspended}}\"\n      },\n      \"product\": {\n        \"productRelationship\": [\n          {\n            \"type\": \"isContainedIn\",\n            \"product\": {\n              \"id\": \"{{po_addService_productId_suspended}}|C|{{po_addService_packageId_suspended}}\"\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"channel\": {\n    \"name\": \"Channel\"\n  }\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "040_Add service",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"var responseData = JSON.parse(responseBody)",
											"",
											"tests[\"status in progress\"] = responseData.state === \"inProgress\";",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"add\",\r\n      \"productOffering\": {\r\n        \"id\": \"{{po_addService_id}}\"\r\n      },\r\n      \"product\": {\r\n        \"productRelationship\": [\r\n          {\r\n            \"type\": \"isContainedIn\",\r\n            \"product\": {\r\n              \"id\": \"{{po_addService_productId}}|C|{{po_addService_packageId}}\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "050_Check in ProductInventory status is Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var service = JSON.parse(responseBody);",
											"//console.log(\"service:\"+JSON.stringify(service));",
											"if(responseCode.code === 200){",
											"tests[\"service Statut is '\"+postman.getEnvironmentVariable(\"pi_status_Actif\")+\"'\"] =  service.status === postman.getEnvironmentVariable(\"pi_status_Actif\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_inventory}}/product/{{po_addService_productId}}|A|{{po_addService_id}}?withParameters=true",
									"host": [
										"{{context_inventory}}"
									],
									"path": [
										"product",
										"{{po_addService_productId}}|A|{{po_addService_id}}"
									],
									"query": [
										{
											"key": "withParameters",
											"value": "true",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "060_Err Add service with characteristic without characteristic in body",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4105\"] = jsonData.code === 4105;",
											"tests[\"Error message\"] = jsonData.message.has(\"Service add impossible\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Parameter must be set in orderItem.product.productCharacteristic for service with id\");",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"add\",\r\n      \"productOffering\": {\r\n        \"id\": \"{{po_addServiceCharac_id}}\"\r\n      },\r\n      \"product\": {\r\n        \"productRelationship\": [\r\n          {\r\n            \"type\": \"isContainedIn\",\r\n            \"product\": {\r\n              \"id\": \"{{po_addServiceCharac_productId}}|C|{{po_addServiceCharac_packageId}}\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "070_Add service with characteristic",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"var responseData = JSON.parse(responseBody)",
											"",
											"tests[\"status in progress\"] = responseData.state === \"inProgress\";",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderItem\": [\n    {\n      \"id\": \"1\",\n      \"action\": \"add\",\n      \"productOffering\": {\n        \"id\": \"{{po_addServiceCharac_id}}\"\n      },\n      \"product\": {\n        \"productCharacteristic\": [\n          {\n            \"name\": \"{{po_addService_characName}}\",\n            \"value\": \"{{po_addService_characValue}}\"\n          }\n        ],\n        \"productRelationship\": [\n          {\n            \"type\": \"isContainedIn\",\n            \"product\": {\n              \"id\": \"{{po_addServiceCharac_productId}}|C|{{po_addServiceCharac_packageId}}\"\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"channel\": {\n    \"name\": \"Channel\"\n  }\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "080_Check in ProductInventory status is Active and caracteristics",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var service = JSON.parse(responseBody);",
											"//console.log(\"service:\"+JSON.stringify(service));",
											"if(responseCode.code === 200){",
											"tests[\"service Statut is '\"+postman.getEnvironmentVariable(\"pi_status_Actif\")+\"'\"] =  service.status === postman.getEnvironmentVariable(\"pi_status_Actif\");",
											"}",
											"",
											"var characteristic = _.find(service.productCharacteristic, function(o) { return o.name == postman.getEnvironmentVariable(\"po_addService_characName\"); });",
											"//console.log(\"characteristic\",characteristic);",
											"if(_.isEmpty(characteristic)){",
											"    tests['characteristic found'] = false;",
											"}else{",
											"    tests['characteristic found'] = true;",
											"    tests['characteristic value is upadated'] = characteristic.value === postman.getEnvironmentVariable(\"po_addService_characValue\");",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_inventory}}/product/{{po_addServiceCharac_productId}}|A|{{po_addServiceCharac_id}}?withParameters=true",
									"host": [
										"{{context_inventory}}"
									],
									"path": [
										"product",
										"{{po_addServiceCharac_productId}}|A|{{po_addServiceCharac_id}}"
									],
									"query": [
										{
											"key": "withParameters",
											"value": "true",
											"equals": true
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UpdateService",
					"item": [
						{
							"name": "010_Update service caracteristics",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"var responseData = JSON.parse(responseBody)",
											"",
											"tests[\"status in progress\"] = responseData.state === \"inProgress\";",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"modifyCharacteristic\",\r\n      \"product\": {\r\n        \"id\": \"{{po_service_productIdActive}}|A|{{po_service_id}}\",\r\n        \"productCharacteristic\": [\r\n          {\r\n            \"name\": \"{{po_service_characName}}\",\r\n            \"value\": \"{{po_service_characValue1}}\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "020_Check in ProductInventory characteristics",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var inventories = JSON.parse(responseBody);",
											"",
											"var service = _.find(inventories, function(o) { return o.name == postman.getEnvironmentVariable(\"po_service_name\"); } );",
											"",
											"if(_.isEmpty(service)){",
											"    tests[postman.getEnvironmentVariable(\"po_service_name\")+\" service found\"] = false;",
											"} else {",
											"    tests[postman.getEnvironmentVariable(\"po_service_name\")+\" service found\"] = true;",
											"    // Test si le product portant le barring est au status AttenteActivation",
											"    tests[postman.getEnvironmentVariable(\"po_service_name\")+\" service Statut is '\"+postman.getEnvironmentVariable(\"pi_status_Actif\")+\"'\"] =  service.status === postman.getEnvironmentVariable(\"pi_status_Actif\");",
											"}",
											"",
											"var characteristic = _.find(service.productCharacteristic, function(o) { return o.name == postman.getEnvironmentVariable(\"po_service_characName\"); });",
											"//console.log(\"characteristic\",characteristic);",
											"if(_.isEmpty(characteristic)){",
											"    tests['characteristic found'] = false;",
											"}else{",
											"    tests['characteristic found'] = true;",
											"    tests['Characteristic value is upadated'] = characteristic.value === postman.getEnvironmentVariable(\"po_service_characValue1\");",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_inventory}}/product?publicKey={{po_service_msisdn}}&withParameters=true",
									"host": [
										"{{context_inventory}}"
									],
									"path": [
										"product"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{po_service_msisdn}}",
											"equals": true
										},
										{
											"key": "withParameters",
											"value": "true",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "010_Update service caracteristics copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"var responseData = JSON.parse(responseBody)",
											"",
											"tests[\"status in progress\"] = responseData.state === \"inProgress\";",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderItem\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"action\": \"modifyCharacteristic\",\r\n      \"product\": {\r\n        \"id\": \"{{po_service_productIdActive}}|A|{{po_service_id}}\",\r\n        \"productCharacteristic\": [\r\n          {\r\n            \"name\": \"{{po_service_characName}}\",\r\n            \"value\": \"{{po_service_characValue1}}\"\r\n          }\r\n        ]\r\n      },\r\n      \"productOffering\": {\r\n        \"category\": \"service\"\r\n      }\r\n    }\r\n  ],\r\n  \"channel\": {\r\n    \"name\": \"Channel\"\r\n  }\r\n}"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SimSwap",
					"item": [
						{
							"name": "010_Err missing one required orderItem",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4001\"] = jsonData.code === 4001;",
											"tests[\"Error message\"] = jsonData.message.has(\"Missing parameter\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Parameter orderItem.id == 2 is missing, null or empty\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"orderItem\": [\r\n        {\r\n            \"id\": \"1\",\r\n            \"action\": \"deleteCharacteristic\",\r\n            \"orderItemRelationship\":\r\n                {\r\n                    \"type\": \"isPrerequisite\",\r\n                    \"id\": \"2\"\r\n                },\r\n            \"product\": {\r\n                \"productOffering\": {\r\n                    \"id\": \"simCard\"\r\n                },\r\n                \"productCharacteristic\": [\r\n                    {\r\n                        \"name\": \"iccId\",\r\n                        \"value\": \"{{po_simswap_oldIccId}}\"\r\n                    }\r\n                ],\r\n                \"productRelationship\": [\r\n                    {\r\n                        \"type\": \"isContainedIn\",\r\n                        \"product\": {\r\n                            \"id\": \"{{po_simswap_productId}}\" \r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ],\r\n    \"channel\": {\r\n        \"name\": \"Nomad\"\r\n    }\r\n}\r\n"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "011_Err Contract id is not the same in both orderItem",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4003\"] = jsonData.code === 4003;",
											"tests[\"Error message\"] = jsonData.message.has(\"Bad parameter value\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Contract id must be the same in each orderItem for sim swap\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"orderItem\": [\r\n        {\r\n            \"id\": \"1\",\r\n            \"action\": \"deleteCharacteristic\",\r\n            \"orderItemRelationship\":\r\n                {\r\n                    \"type\": \"isPrerequisite\",\r\n                    \"id\": \"2\"\r\n                },\r\n            \"product\": {\r\n                \"productOffering\": {\r\n                    \"id\": \"simCard\"\r\n                },\r\n                \"productCharacteristic\": [\r\n                    {\r\n                        \"name\": \"iccId\",\r\n                        \"value\": \"{{po_simswap_oldIccId}}\"\r\n                    }\r\n                ],\r\n                \"productRelationship\": [\r\n                    {\r\n                        \"type\": \"isContainedIn\",\r\n                        \"product\": {\r\n                            \"id\": \"{{po_simswap_productId}}\" \r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"2\",\r\n            \"action\": \"addCharacteristic\",\r\n            \"orderItemRelationship\":\r\n                {\r\n                    \"type\": \"hasPrerequisite\",\r\n                    \"id\": \"1\"\r\n                },\r\n            \"product\": {\r\n                \"productOffering\": {\r\n                    \"id\": \"simCard\"\r\n                },\r\n                \"productCharacteristic\": [\r\n                    {\r\n                        \"name\": \"iccId\",\r\n                        \"value\": \"{{po_simswap_newIccId}}\"\r\n                    }\r\n                ],\r\n                \"productRelationship\": [\r\n                    {\r\n                        \"type\": \"isContainedIn\",\r\n                        \"product\": {\r\n                            \"id\": \"{{po_service_productIdUnknown}}\"\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ],\r\n    \"channel\": {\r\n        \"name\": \"Nomad\"\r\n    }\r\n}\r\n"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "012_Err invalid old iccId",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4103\"] = jsonData.code === 4103;",
											"tests[\"Error message\"] = jsonData.message.has(\"Sim swap impossible\");",
											"tests[\"Error description\"] = jsonData.description.has(\"The old resource is not assigned to the contract or the new resource is not available\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"orderItem\": [\r\n        {\r\n            \"id\": \"1\",\r\n            \"action\": \"deleteCharacteristic\",\r\n            \"orderItemRelationship\":\r\n                {\r\n                    \"type\": \"isPrerequisite\",\r\n                    \"id\": \"2\"\r\n                },\r\n            \"product\": {\r\n                \"productOffering\": {\r\n                    \"id\": \"simCard\"\r\n                },\r\n                \"productCharacteristic\": [\r\n                    {\r\n                        \"name\": \"iccId\",\r\n                        \"value\": \"{{po_simswap_invalidIccId}}\"\r\n                    }\r\n                ],\r\n                \"productRelationship\": [\r\n                    {\r\n                        \"type\": \"isContainedIn\",\r\n                        \"product\": {\r\n                            \"id\": \"{{po_simswap_productId}}\" \r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"2\",\r\n            \"action\": \"addCharacteristic\",\r\n            \"orderItemRelationship\":\r\n                {\r\n                    \"type\": \"hasPrerequisite\",\r\n                    \"id\": \"1\"\r\n                },\r\n            \"product\": {\r\n                \"productOffering\": {\r\n                    \"id\": \"simCard\"\r\n                },\r\n                \"productCharacteristic\": [\r\n                    {\r\n                        \"name\": \"iccId\",\r\n                        \"value\": \"{{po_simswap_newIccId}}\"\r\n                    }\r\n                ],\r\n                \"productRelationship\": [\r\n                    {\r\n                        \"type\": \"isContainedIn\",\r\n                        \"product\": {\r\n                            \"id\": \"{{po_simswap_productId}}\"\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ],\r\n    \"channel\": {\r\n        \"name\": \"Nomad\"\r\n    }\r\n}\r\n"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "013_Err invalid new iccId",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4103\"] = jsonData.code === 4103;",
											"tests[\"Error message\"] = jsonData.message.has(\"Sim swap impossible\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Sim card not found for number  : \"+postman.getEnvironmentVariable(\"po_simswap_invalidIccId\"));",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"orderItem\": [\r\n        {\r\n            \"id\": \"1\",\r\n            \"action\": \"deleteCharacteristic\",\r\n            \"orderItemRelationship\":\r\n                {\r\n                    \"type\": \"isPrerequisite\",\r\n                    \"id\": \"2\"\r\n                },\r\n            \"product\": {\r\n                \"productOffering\": {\r\n                    \"id\": \"simCard\"\r\n                },\r\n                \"productCharacteristic\": [\r\n                    {\r\n                        \"name\": \"iccId\",\r\n                        \"value\": \"{{po_simswap_oldIccId}}\"\r\n                    }\r\n                ],\r\n                \"productRelationship\": [\r\n                    {\r\n                        \"type\": \"isContainedIn\",\r\n                        \"product\": {\r\n                            \"id\": \"{{po_simswap_productId}}\" \r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"2\",\r\n            \"action\": \"addCharacteristic\",\r\n            \"orderItemRelationship\":\r\n                {\r\n                    \"type\": \"hasPrerequisite\",\r\n                    \"id\": \"1\"\r\n                },\r\n            \"product\": {\r\n                \"productOffering\": {\r\n                    \"id\": \"simCard\"\r\n                },\r\n                \"productCharacteristic\": [\r\n                    {\r\n                        \"name\": \"iccId\",\r\n                        \"value\": \"{{po_simswap_invalidIccId}}\"\r\n                    }\r\n                ],\r\n                \"productRelationship\": [\r\n                    {\r\n                        \"type\": \"isContainedIn\",\r\n                        \"product\": {\r\n                            \"id\": \"{{po_simswap_productId}}\"\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ],\r\n    \"channel\": {\r\n        \"name\": \"Nomad\"\r\n    }\r\n}\r\n"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "014_Err Unknown id for main offer",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4103\"] = jsonData.code === 4103;",
											"tests[\"Error message\"] = jsonData.message.has(\"Sim swap impossible\");",
											"tests[\"Error description\"] = jsonData.description.has(\"No contract found with id {\"+postman.getEnvironmentVariable(\"po_service_productIdUnknown\")+\"}\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"orderItem\": [\r\n        {\r\n            \"id\": \"1\",\r\n            \"action\": \"deleteCharacteristic\",\r\n            \"orderItemRelationship\":\r\n                {\r\n                    \"type\": \"isPrerequisite\",\r\n                    \"id\": \"2\"\r\n                },\r\n            \"product\": {\r\n                \"productOffering\": {\r\n                    \"id\": \"simCard\"\r\n                },\r\n                \"productCharacteristic\": [\r\n                    {\r\n                        \"name\": \"iccId\",\r\n                        \"value\": \"{{po_simswap_oldIccId}}\"\r\n                    }\r\n                ],\r\n                \"productRelationship\": [\r\n                    {\r\n                        \"type\": \"isContainedIn\",\r\n                        \"product\": {\r\n                            \"id\": \"{{po_service_productIdUnknown}}\" \r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"2\",\r\n            \"action\": \"addCharacteristic\",\r\n            \"orderItemRelationship\":\r\n                {\r\n                    \"type\": \"hasPrerequisite\",\r\n                    \"id\": \"1\"\r\n                },\r\n            \"product\": {\r\n                \"productOffering\": {\r\n                    \"id\": \"simCard\"\r\n                },\r\n                \"productCharacteristic\": [\r\n                    {\r\n                        \"name\": \"iccId\",\r\n                        \"value\": \"{{po_simswap_newIccId}}\"\r\n                    }\r\n                ],\r\n                \"productRelationship\": [\r\n                    {\r\n                        \"type\": \"isContainedIn\",\r\n                        \"product\": {\r\n                            \"id\": \"{{po_service_productIdUnknown}}\"\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ],\r\n    \"channel\": {\r\n        \"name\": \"Nomad\"\r\n    }\r\n}\r\n"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "015_Err Contract is in terminated state",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4103\"] = jsonData.code === 4103;",
											"tests[\"Error message\"] = jsonData.message.has(\"Sim swap impossible\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Contract is not in pending_active or active state\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"orderItem\": [\r\n        {\r\n            \"id\": \"1\",\r\n            \"action\": \"deleteCharacteristic\",\r\n            \"orderItemRelationship\":\r\n                {\r\n                    \"type\": \"isPrerequisite\",\r\n                    \"id\": \"2\"\r\n                },\r\n            \"product\": {\r\n                \"productOffering\": {\r\n                    \"id\": \"simCard\"\r\n                },\r\n                \"productCharacteristic\": [\r\n                    {\r\n                        \"name\": \"iccId\",\r\n                        \"value\": \"{{po_simswap_oldIccId}}\"\r\n                    }\r\n                ],\r\n                \"productRelationship\": [\r\n                    {\r\n                        \"type\": \"isContainedIn\",\r\n                        \"product\": {\r\n                            \"id\": \"{{po_simswap_productIdTerminated}}\" \r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"2\",\r\n            \"action\": \"addCharacteristic\",\r\n            \"orderItemRelationship\":\r\n                {\r\n                    \"type\": \"hasPrerequisite\",\r\n                    \"id\": \"1\"\r\n                },\r\n            \"product\": {\r\n                \"productOffering\": {\r\n                    \"id\": \"simCard\"\r\n                },\r\n                \"productCharacteristic\": [\r\n                    {\r\n                        \"name\": \"iccId\",\r\n                        \"value\": \"{{po_simswap_newIccId}}\"\r\n                    }\r\n                ],\r\n                \"productRelationship\": [\r\n                    {\r\n                        \"type\": \"isContainedIn\",\r\n                        \"product\": {\r\n                            \"id\": \"{{po_simswap_productIdTerminated}}\"\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ],\r\n    \"channel\": {\r\n        \"name\": \"Nomad\"\r\n    }\r\n}\r\n"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "020_ SimSwap",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"var responseData = JSON.parse(responseBody)",
											"",
											"tests[\"status in progress\"] = responseData.state === \"inProgress\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"orderItem\": [\r\n        {\r\n            \"id\": \"1\",\r\n            \"action\": \"deleteCharacteristic\",\r\n            \"orderItemRelationship\":\r\n                {\r\n                    \"type\": \"isPrerequisite\",\r\n                    \"id\": \"2\"\r\n                },\r\n            \"product\": {\r\n                \"productOffering\": {\r\n                    \"id\": \"simCard\"\r\n                },\r\n                \"productCharacteristic\": [\r\n                    {\r\n                        \"name\": \"iccId\",\r\n                        \"value\": \"{{po_simswap_oldIccId}}\"\r\n                    }\r\n                ],\r\n                \"productRelationship\": [\r\n                    {\r\n                        \"type\": \"isContainedIn\",\r\n                        \"product\": {\r\n                            \"id\": \"{{po_simswap_productId}}\" \r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"2\",\r\n            \"action\": \"addCharacteristic\",\r\n            \"orderItemRelationship\":\r\n                {\r\n                    \"type\": \"hasPrerequisite\",\r\n                    \"id\": \"1\"\r\n                },\r\n            \"product\": {\r\n                \"productOffering\": {\r\n                    \"id\": \"simCard\"\r\n                },\r\n                \"productCharacteristic\": [\r\n                    {\r\n                        \"name\": \"iccId\",\r\n                        \"value\": \"{{po_simswap_newIccId}}\"\r\n                    }\r\n                ],\r\n                \"productRelationship\": [\r\n                    {\r\n                        \"type\": \"isContainedIn\",\r\n                        \"product\": {\r\n                            \"id\": \"{{po_simswap_productId}}\"\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ],\r\n    \"channel\": {\r\n        \"name\": \"Nomad\"\r\n    }\r\n}\r\n"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "021_Check in ProductInventory if IccId has a new value",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var inventories = JSON.parse(responseBody);",
											"",
											"var simCardOffer = _.find(inventories, function(o) { return o.productOffering.id == \"simCard\"; } );",
											"",
											"console.log(\"simCardOffer\", simCardOffer);",
											"",
											"if(_.isEmpty(simCardOffer)){",
											"    tests['simCard offer found'] = false;",
											"} else {",
											"    tests['simCard offer found'] = true;",
											"    // Test si le product portant le barring est au status AttenteActivation",
											"    tests[\"simCard offer iccId is '\"+postman.getEnvironmentVariable(\"po_simswap_newIccId\")+\"'\"]= ",
											"    _.find(simCardOffer.productCharacteristic, function(o) { return o.value == postman.getEnvironmentVariable(\"po_simswap_newIccId\"); } );",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_inventory}}/product?publicKey={{po_simswap_msisdn}}",
									"host": [
										"{{context_inventory}}"
									],
									"path": [
										"product"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{po_simswap_msisdn}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Payment",
			"description": "",
			"item": [
				{
					"name": "FIND payment",
					"description": "",
					"item": [
						{
							"name": "010_Find by payerId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "badbf572-c90a-4f27-a7f3-895624c089c9",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_payments\"));",
											"tests[\"Validate data\"] = _.isEqual(jsonData,refData); ",
											"",
											"pm.test(\"check X-Result-Count\", function () {",
											"    pm.response.to.have.header(\"X-Result-Count\",\"\"+_.size(refData));",
											"});",
											"",
											"pm.test(\"check X-Total-Count\", function () {",
											"    pm.response.to.have.header(\"X-Total-Count\",postman.getEnvironmentVariable(\"payment_nbTotalCount\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_payment}}/payment?payer.id={{payment_partyId}}&paymentDate.gte=1999-01-01",
									"host": [
										"{{context_payment}}"
									],
									"path": [
										"payment"
									],
									"query": [
										{
											"key": "payer.id",
											"value": "{{payment_partyId}}",
											"equals": true
										},
										{
											"key": "paymentDate.gte",
											"value": "1999-01-01",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "020_Find by payerId with limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6774f73c-1c2c-4743-8637-3073a5c4e57a",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var limit = parseInt(postman.getEnvironmentVariable(\"payment_limit\"));",
											"tests[\"Validate limit\"] = jsonData.length === limit;",
											"",
											"",
											"pm.test(\"check X-Result-Count\", function () {",
											"    pm.response.to.have.header(\"X-Result-Count\", \"\"+limit);",
											"});",
											"",
											"pm.test(\"check X-Total-Count\", function () {",
											"    pm.response.to.have.header(\"X-Total-Count\", postman.getEnvironmentVariable(\"payment_nbTotalCount\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_payment}}/payment?payer.id={{payment_partyId}}&paymentDate.gte=1999-01-01&limit={{payment_limit}}",
									"host": [
										"{{context_payment}}"
									],
									"path": [
										"payment"
									],
									"query": [
										{
											"key": "payer.id",
											"value": "{{payment_partyId}}",
											"equals": true
										},
										{
											"key": "paymentDate.gte",
											"value": "1999-01-01",
											"equals": true
										},
										{
											"key": "limit",
											"value": "{{payment_limit}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "030_Find by payerId with startDate and endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05f4d530-fd4b-4e15-aaa4-7c10eeaa2db1",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"// 1 result only",
											"tests[\"Validate result size\"] = jsonData.length === 1;",
											"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_payment\"));",
											"tests[\"Validate result\"] = _.isEqual(jsonData[0],refData); ",
											"",
											"pm.test(\"check X-Result-Count\", function () {",
											"    pm.response.to.have.header(\"X-Result-Count\", \"1\");",
											"});",
											"",
											"pm.test(\"check X-Total-Count\", function () {",
											"    pm.response.to.have.header(\"X-Total-Count\", \"1\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_payment}}/payment?payer.id={{payment_partyId}}&paymentDate.gte={{payment_date}}&paymentDate.lte={{payment_date}}",
									"host": [
										"{{context_payment}}"
									],
									"path": [
										"payment"
									],
									"query": [
										{
											"key": "payer.id",
											"value": "{{payment_partyId}}",
											"equals": true
										},
										{
											"key": "paymentDate.gte",
											"value": "{{payment_date}}",
											"equals": true
										},
										{
											"key": "paymentDate.lte",
											"value": "{{payment_date}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "040_Find by payerId: ERR, unknown payerId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b92e769-3052-4e6a-8564-43d9edb0440d",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Empty response\"] = _.isEmpty(jsonData);",
											"",
											"pm.test(\"check X-Result-Count\", function () {",
											"    pm.response.to.have.header(\"X-Result-Count\",\"0\");",
											"});",
											"",
											"pm.test(\"check X-Total-Count\", function () {",
											"    pm.response.to.have.header(\"X-Total-Count\",\"0\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_payment}}/payment?payer.id={{payment_partyId_unknown}}&paymentDate.gte=1999-01-01",
									"host": [
										"{{context_payment}}"
									],
									"path": [
										"payment"
									],
									"query": [
										{
											"key": "payer.id",
											"value": "{{payment_partyId_unknown}}",
											"equals": true
										},
										{
											"key": "paymentDate.gte",
											"value": "1999-01-01",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "050_Find by payerId: ERR, endDate before startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75269827-0d7f-4968-9b67-dae85c2de54b",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4003\"] = jsonData.code === 4003;",
											"tests[\"message\"] = jsonData.message.has(\"Bad parameter value\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Bad value for parameter paymentDate.lte: [1998-12-31], should be [after 1999-01-01]\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_payment}}/payment?payer.id={{payment_partyId}}&paymentDate.gte=1999-01-01&paymentDate.lte=1998-12-31",
									"host": [
										"{{context_payment}}"
									],
									"path": [
										"payment"
									],
									"query": [
										{
											"key": "payer.id",
											"value": "{{payment_partyId}}",
											"equals": true
										},
										{
											"key": "paymentDate.gte",
											"value": "1999-01-01",
											"equals": true
										},
										{
											"key": "paymentDate.lte",
											"value": "1998-12-31",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "060_Find by payerId: ERR, missing startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c94de122-6984-4ee1-90f5-257152ce5743",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
											"tests[\"message\"] = jsonData.message.has(\"Missing parameter\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Parameter paymentDate.gte is missing, null or empty\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_payment}}/payment?payer.id={{payment_partyId}}&paymentDate.lte=1998-12-31",
									"host": [
										"{{context_payment}}"
									],
									"path": [
										"payment"
									],
									"query": [
										{
											"key": "payer.id",
											"value": "{{payment_partyId}}",
											"equals": true
										},
										{
											"key": "paymentDate.lte",
											"value": "1998-12-31",
											"equals": true
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "POST Payment",
					"description": "",
					"item": [
						{
							"name": "010_Create Payment: ERR, missing correlatorId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc3b5305-51b1-45a2-be4f-45afa30dbd75",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
											"tests[\"message\"] = jsonData.message.has(\"Missing parameter\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Parameter correlatorId is missing, null or empty\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"transactionType\": \"debt\",\n        \"totalAmount\": {\n            \"amount\": 10\n        },\n        \"payer\": {\n            \"id\": \"CUST0000000\"\n        },\n        \"paymentItem\": [\n            {\n                \"totalAmount\": {\n                    \"amount\": 10\n                },\n                \"item\": {\n                    \"id\": \"999999\"\n                }\n            }\n        ]\n}"
								},
								"url": "{{context_payment}}/payment"
							},
							"response": []
						},
						{
							"name": "020_Create Payment: ERR, missing totalAmount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d15a8184-c3a2-470f-a4b8-6419c37631af",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
											"tests[\"message\"] = jsonData.message.has(\"Missing parameter\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Parameter totalAmount.amount is missing, null or empty\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"correlatorId\": \"123456\",\n        \"transactionType\": \"debt\",\n        \"payer\": {\n            \"id\": \"CUST0000000\"\n        },\n        \"paymentItem\": [\n            {\n                \"totalAmount\": {\n                    \"amount\": 10\n                },\n                \"item\": {\n                    \"id\": \"999999\"\n                }\n            }\n        ]\n}"
								},
								"url": "{{context_payment}}/payment"
							},
							"response": []
						},
						{
							"name": "030_Create Payment: ERR, missing transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2adc5fcc-71d1-4797-b743-02b179a6f90c",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
											"tests[\"message\"] = jsonData.message.has(\"Missing parameter\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Parameter transactionType is missing, null or empty\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"correlatorId\": \"123456\",\n        \"totalAmount\": {\n            \"amount\": 10\n        },\n        \"payer\": {\n            \"id\": \"CUST0000000\"\n        },\n        \"paymentItem\": [\n            {\n                \"totalAmount\": {\n                    \"amount\": 10\n                },\n                \"item\": {\n                    \"id\": \"999999\"\n                }\n            }\n        ]\n}"
								},
								"url": "{{context_payment}}/payment"
							},
							"response": []
						},
						{
							"name": "040_Create Payment: ERR, missing payerId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da1ba4cd-1b5f-4025-be75-09990cd6ffc6",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
											"tests[\"message\"] = jsonData.message.has(\"Missing parameter\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Parameter payer.id is missing, null or empty\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"correlatorId\": \"123456\",\n        \"transactionType\": \"debt\",\n        \"totalAmount\": {\n            \"amount\": 10\n        },\n        \"paymentItem\": [\n            {\n                \"totalAmount\": {\n                    \"amount\": 10\n                },\n                \"item\": {\n                    \"id\": \"999999\"\n                }\n            }\n        ]\n}"
								},
								"url": "{{context_payment}}/payment"
							},
							"response": []
						},
						{
							"name": "050_Create Payment: ERR, missing paymentItemItem",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c81d8ef-76df-4241-ad75-994cdef0eb8b",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
											"tests[\"message\"] = jsonData.message.has(\"Missing parameter\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Parameter paymentItem.item.id is missing, null or empty\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"correlatorId\": \"123456\",\n        \"transactionType\": \"debt\",\n        \"totalAmount\": {\n            \"amount\": 10\n        },\n        \"payer\": {\n            \"id\": \"CUST0000000\"\n        },\n        \"paymentItem\": [\n            {\n                \"totalAmount\": {\n                    \"amount\": 10\n                }\n            }\n        ]\n}"
								},
								"url": "{{context_payment}}/payment"
							},
							"response": []
						},
						{
							"name": "060_Create Payment: ERR, missing paymentItemTotalAmount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56446ee5-0b7e-47aa-8290-b123475d9c04",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
											"tests[\"message\"] = jsonData.message.has(\"Missing parameter\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Parameter paymentItem.totalAmount.amount is missing, null or empty\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"correlatorId\": \"123456\",\n        \"transactionType\": \"debt\",\n        \"totalAmount\": {\n            \"amount\": 10\n        },\n        \"payer\": {\n            \"id\": \"CUST0000000\"\n        },\n        \"paymentItem\": [\n            {\n                \"item\": {\n                    \"id\": \"999999\"\n                }\n            }\n        ]\n}"
								},
								"url": "{{context_payment}}/payment"
							},
							"response": []
						},
						{
							"name": "070_Create Payment: ERR, unknown payerId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8e4910e-21f7-438c-9e13-4d3dd56182fe",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4003\"] = jsonData.code === 4003;",
											"tests[\"message\"] = jsonData.message.has(\"Bad parameter value\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Bad value for parameter payer.id: [\"+postman.getEnvironmentVariable(\"payment_partyId_unknown\")+\"]\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"correlatorId\": \"123456\",\n        \"paymentDate\": \"2000-07-25T00:00:00Z\",\n        \"transactionType\": \"debt\",\n        \"totalAmount\": {\n            \"amount\": 10,\n            \"units\": \"BWP\"\n        },\n        \"payer\": {\n            \"id\": \"{{payment_partyId_unknown}}\"\n        },\n        \"paymentItem\": [\n            {\n            \t\"totalAmount\": {\n                    \"amount\": 10\n                },\n                \"item\": {\n                    \"id\": \"999999\"\n                }\n            }\n        ],\n        \"paymentMethod\": [\n        \t{\n        \t\t\"type\":\"Cash\"\n        \t}\n        ]\n}"
								},
								"url": "{{context_payment}}/payment"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Eligibility",
			"description": "",
			"item": [
				{
					"name": "GET EligibleOption",
					"description": "",
					"item": [
						{
							"name": "010_Get EligibleOptions by msisdn",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09de4d1c-34f9-408c-8bc7-ee3d6f79aa77",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_el_options\"));",
											"tests[\"Validate data\"] = _.isEqual(jsonData,refData); ",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_eligibility}}/eligibleOptions?publicKey={{el_msisdn}}",
									"host": [
										"{{context_eligibility}}"
									],
									"path": [
										"eligibleOptions"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{el_msisdn}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "020_Get EligibleContract for migration: ERR, missing msisdn",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bacfcac5-1054-4ec5-92f0-8be7df0f3f38",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Response code is 4001\"] = jsonData.code === 4001;",
											"tests[\"message\"] = jsonData.message.has(\"Missing parameter\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Parameter publicKey is missing, null or empty\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_eligibility}}/eligibleOptions?publicKey=",
									"host": [
										"{{context_eligibility}}"
									],
									"path": [
										"eligibleOptions"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "030_Get EligibleOptions by msisdn and productOfferingId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9426d78-f134-4bcf-9ce2-96f7ef96a5ef",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var refData = JSON.parse(postman.getEnvironmentVariable(\"el_reference_option\"));",
											"tests[\"Validate data\"] = _.isEqual(jsonData,refData); ",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_eligibility}}/eligibleOptions?publicKey={{el_msisdn}}&productOfferingId={{el_productOfferingId}}",
									"host": [
										"{{context_eligibility}}"
									],
									"path": [
										"eligibleOptions"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{el_msisdn}}",
											"equals": true
										},
										{
											"key": "productOfferingId",
											"value": "{{el_productOfferingId}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "040_Get EligibleOptions by msisdn and productOfferingId: ERR, unknown productOfferingId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e837f1cb-713e-4d23-8330-1973ec3fef99",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Empty response\"] = _.isEmpty(jsonData);",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_eligibility}}/eligibleOptions?publicKey={{el_msisdn}}&productOfferingId=UNKNOWN",
									"host": [
										"{{context_eligibility}}"
									],
									"path": [
										"eligibleOptions"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{el_msisdn}}",
											"equals": true
										},
										{
											"key": "productOfferingId",
											"value": "UNKNOWN",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "050_Get EligibleOptions by msisdn and productSpecificationId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41a1cedc-745c-471e-9290-4614b36a5b2e",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var refData = JSON.parse(postman.getEnvironmentVariable(\"el_reference_productSpecificationId\"));",
											"console.log(refData)",
											"tests[\"Validate data\"] = _.isEqual(jsonData,refData); ",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_eligibility}}/eligibleOptions?publicKey={{el_msisdn}}&productSpecification.id={{el_productSpecificationId}}",
									"host": [
										"{{context_eligibility}}"
									],
									"path": [
										"eligibleOptions"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{el_msisdn}}",
											"equals": true
										},
										{
											"key": "productSpecification.id",
											"value": "{{el_productSpecificationId}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "060_Get EligibleOptions by msisdn and productSpecId: ERR, unknown productSpecId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e837f1cb-713e-4d23-8330-1973ec3fef99",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Empty response\"] = _.isEmpty(jsonData);",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_eligibility}}/eligibleOptions?publicKey={{el_msisdn}}&productSpecification.id=UNKNOWN",
									"host": [
										"{{context_eligibility}}"
									],
									"path": [
										"eligibleOptions"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{el_msisdn}}",
											"equals": true
										},
										{
											"key": "productSpecification.id",
											"value": "UNKNOWN",
											"equals": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "070_Get EligibleOptions by msisdn and productOfferingId and productSpecId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aadf363a-0650-4068-8dfd-3c274add201f",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var refData = JSON.parse(postman.getEnvironmentVariable(\"el_reference_option\"));",
											"tests[\"Validate data\"] = _.isEqual(jsonData,refData); ",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_eligibility}}/eligibleOptions?publicKey={{el_msisdn}}&productOfferingId={{el_productOfferingId}}&productSpecification.id={{el_productSpecificationId}}",
									"host": [
										"{{context_eligibility}}"
									],
									"path": [
										"eligibleOptions"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{el_msisdn}}",
											"equals": true
										},
										{
											"key": "productOfferingId",
											"value": "{{el_productOfferingId}}",
											"equals": true
										},
										{
											"key": "productSpecification.id",
											"value": "{{el_productSpecificationId}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET EligibleContract",
					"description": "",
					"item": [
						{
							"name": "010_Get EligibleContract for migration by msisdn",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e24a6db9-64a2-4382-bbd7-7cf26e36670a",
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_el_migration\"));",
											"tests[\"Validate data\"] = _.isEqual(jsonData,refData); ",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "login",
										"value": "{{headers_login}}"
									},
									{
										"key": "password",
										"value": "{{headers_password}}"
									},
									{
										"key": "platform",
										"value": "{{headers_platform}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{context_eligibility}}/eligibleContract?publicKey={{el_msisdn}}",
									"host": [
										"{{context_eligibility}}"
									],
									"path": [
										"eligibleContract"
									],
									"query": [
										{
											"key": "publicKey",
											"value": "{{el_msisdn}}",
											"equals": true
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "ProductInventory",
			"description": "",
			"item": [
				{
					"name": "FIND all by msisdn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc122a09-b153-4194-bdd2-12885f798b73",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pi_all\"));",
									"tests[\"Validate data\"] = _.isEqual(jsonData,refData);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?publicKey={{pi_msisdn}}",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{pi_msisdn}}",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "FIND all by msisdn withParameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f66f48e6-d76e-46f3-b541-939f0ac25f50",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pi_all_withParams\"));",
									"tests[\"Validate data\"] = _.isEqual(jsonData,refData);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?publicKey={{pi_msisdn}}&withParameters=true",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{pi_msisdn}}",
									"equals": true
								},
								{
									"key": "withParameters",
									"value": "true",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "FIND offer by msisdn and productSpecId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de8b00c4-ab62-49a0-83bc-93a5028b2cfe",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Check size\"] = jsonData.length === 1;",
									"",
									"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pi_all\"));",
									"var refDataFiltered = _.filter(refData, {'productSpecification':{'id':'offer'}});",
									"tests[\"Validate data\"] = _.isEqual(jsonData,refDataFiltered);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?publicKey={{pi_msisdn}}&productSpecification.id=offer",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{pi_msisdn}}",
									"equals": true
								},
								{
									"key": "productSpecification.id",
									"value": "offer",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "FIND offer by msisdn and category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de8b00c4-ab62-49a0-83bc-93a5028b2cfe",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Check size\"] = jsonData.length === 1;",
									"",
									"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pi_all\"));",
									"var refDataFiltered = _.filter(refData, {'productSpecification':{'id':'offer'}});",
									"tests[\"Validate data\"] = _.isEqual(jsonData,refDataFiltered);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?publicKey={{pi_msisdn}}&productOffering.category=offer",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{pi_msisdn}}",
									"equals": true
								},
								{
									"key": "productOffering.category",
									"value": "offer",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "FIND accessService by msisdn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83be4f65-1b0a-4e0b-b6d6-b005f217c3d8",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Check size\"] = jsonData.length === 2;",
									"",
									"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pi_all\"));",
									"var refDataFiltered = _.filter(refData, {'productSpecification':{'id':'accessService'}});",
									"tests[\"Validate data\"] = _.isEqual(jsonData,refDataFiltered);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?publicKey={{pi_msisdn}}&productSpecification.id=accessService",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{pi_msisdn}}",
									"equals": true
								},
								{
									"key": "productSpecification.id",
									"value": "accessService",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "FIND services package by msisdn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9795da0a-5b9d-477e-a4c2-82f4def2243b",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Check size\"] = jsonData.length === parseInt(postman.getEnvironmentVariable(\"pi_servicePackages_number\"));",
									"",
									"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pi_all\"));",
									"var refDataFiltered = _.filter(refData, {'productOffering':{'category':'package'}});",
									"tests[\"Validate data\"] = _.isEqual(jsonData,refDataFiltered);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?publicKey={{pi_msisdn}}&productOffering.category=package",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{pi_msisdn}}",
									"equals": true
								},
								{
									"key": "productOffering.category",
									"value": "package",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "FIND BSCS services by msisdn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff5c28ab-6116-49cc-84a5-ed78c70048a0",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Check size: \"+jsonData.length] = jsonData.length === parseInt(postman.getEnvironmentVariable(\"pi_bscsService_number\"));",
									"",
									"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pi_all\"));",
									"var refDataFiltered = _.filter(refData, function(e) { return e.productSpecification && (e.productSpecification.id == 'serviceBSCS' || e.productSpecification.id == 'faf' )});",
									"",
									"// special behavior for FaF: 'serviceBSCS' filter returns it (without faf numbers) but in the initial ref, its productSpecId is 'faf'",
									"_.forEach(refDataFiltered, function(value) {",
									"  _.set(value, 'productSpecification.id', 'serviceBSCS');",
									"  delete value.productCharacteristic;",
									"});",
									"",
									"tests[\"Validate data\"] = _.isEqual(jsonData,refDataFiltered);",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?publicKey={{pi_msisdn}}&productSpecification.id=serviceBSCS",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{pi_msisdn}}",
									"equals": true
								},
								{
									"key": "productSpecification.id",
									"value": "serviceBSCS",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "FIND core BSCS services by msisdn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49c026ab-686a-477f-8366-c266c78e11c2",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Check size: \"+jsonData.length] = jsonData.length === parseInt(postman.getEnvironmentVariable(\"pi_bscsCoreService_number\"));",
									"",
									"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pi_all\"));",
									"var refDataFiltered = _.filter(refData, {'productSpecification':{'id':'serviceBSCS'}, 'productOffering':{'category':'includedService'}});",
									"tests[\"Validate data\"] = _.isEqual(jsonData,refDataFiltered);",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?publicKey={{pi_msisdn}}&productSpecification.id=serviceBSCS&productOffering.category=includedService",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{pi_msisdn}}",
									"equals": true
								},
								{
									"key": "productSpecification.id",
									"value": "serviceBSCS",
									"equals": true
								},
								{
									"key": "productOffering.category",
									"value": "includedService",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "FIND option BSCS services by msisdn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68f41f94-71ca-45f0-9b20-67268b176a55",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Check size: \"+jsonData.length] = jsonData.length === parseInt(postman.getEnvironmentVariable(\"pi_bscsOptionService_number\"));",
									"",
									"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pi_all\"));",
									"var refDataFiltered = _.filter(refData, function(e) { return e.productSpecification && (e.productSpecification.id == 'serviceBSCS' || e.productSpecification.id == 'faf' ) && e.productOffering.category =='option'});",
									"",
									"// special behavior for FaF: 'serviceBSCS' filter returns it (without faf numbers) but in the initial ref, its productSpecId is 'faf'",
									"_.forEach(refDataFiltered, function(value) {",
									"  _.set(value, 'productSpecification.id', 'serviceBSCS');",
									"  delete value.productCharacteristic;",
									"});",
									"",
									"",
									"var refDataFiltered = _.filter(refData, {'productSpecification':{'id':'serviceBSCS'}, 'productOffering':{'category':'option'}});",
									"tests[\"Validate data\"] = _.isEqual(jsonData,refDataFiltered);",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?publicKey={{pi_msisdn}}&productSpecification.id=serviceBSCS&productOffering.category=option",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{pi_msisdn}}",
									"equals": true
								},
								{
									"key": "productSpecification.id",
									"value": "serviceBSCS",
									"equals": true
								},
								{
									"key": "productOffering.category",
									"value": "option",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "FIND simCard by msisdn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0afce993-af88-40a5-bc5c-dc76171a060e",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Check size\"] = jsonData.length === 1;",
									"",
									"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pi_all\"));",
									"var refDataFiltered = _.filter(refData, {'productOffering':{'id':'simCard'}});",
									"tests[\"Validate data\"] = _.isEqual(jsonData,refDataFiltered);",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?publicKey={{pi_msisdn}}&productOffering.id=simCard",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{pi_msisdn}}",
									"equals": true
								},
								{
									"key": "productOffering.id",
									"value": "simCard",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "FIND mobileCom by msisdn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd49d76c-9e9a-426a-94a5-f8b60165177c",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Check size\"] = jsonData.length === 1;",
									"",
									"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pi_all\"));",
									"var refDataFiltered = _.filter(refData, {'productOffering':{'id':'mobileCom'}});",
									"tests[\"Validate data\"] = _.isEqual(jsonData,refDataFiltered);",
									"tests[\"Validate msisdn\"] = _.isEqual(jsonData[0].productCharacteristic[0].value,postman.getEnvironmentVariable(\"pi_msisdn\"));",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?publicKey={{pi_msisdn}}&productOffering.id=mobileCom",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{pi_msisdn}}",
									"equals": true
								},
								{
									"key": "productOffering.id",
									"value": "mobileCom",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "FIND all by iccId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc122a09-b153-4194-bdd2-12885f798b73",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pi_all\"));",
									"tests[\"Validate data\"] = _.isEqual(jsonData,refData);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?iccId={{pi_iccId}}",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "iccId",
									"value": "{{pi_iccId}}",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "FIND all by iccId with star",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc122a09-b153-4194-bdd2-12885f798b73",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pi_all\"));",
									"tests[\"Validate data\"] = _.isEqual(jsonData,refData);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?iccId={{pi_iccId_withStar}}",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "iccId",
									"value": "{{pi_iccId_withStar}}",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "FIND all: ERR, no iccId nor msisdn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61135556-aa89-4f5f-b1ee-c4f5d7f2c5dc",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response code is 4005\"] = jsonData.code === 4005;",
									"tests[\"message\"] = jsonData.message.has(\"Bad parameter combination\");",
									"tests[\"Error description\"] = jsonData.description.has(\"One or many parameters required from combination :\") && jsonData.description.has(\"[publicKey]\") && jsonData.description.has(\"[iccId]\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{context_inventory}}/product?",
						"description": ""
					},
					"response": []
				},
				{
					"name": "FIND all: ERR, unknown msisdn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8513f1fe-c883-4592-9b77-53b9a7748064",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Empty response\"] = _.isEmpty(jsonData);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?publicKey={{pi_unknown_msisdn}}",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{pi_unknown_msisdn}}",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "FIND all: ERR, unknown status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0497573c-d11d-4a1b-be1d-a0c0be58ca3d",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response code is 4002\"] = jsonData.code === 4002;",
									"tests[\"message\"] = jsonData.message.has(\"Bad parameter format\");",
									"tests[\"Error description\"] = jsonData.description.has(\"Bad format for parameter productStatus: [BAD], must be one of State enum values: [Created, Pending_active, Aborted, Cancelled, Active, Pending_terminate, Terminated, Suspended]\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?publicKey={{pi_msisdn}}&status=BAD",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{pi_msisdn}}",
									"equals": true
								},
								{
									"key": "status",
									"value": "BAD",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "FIND all: ERR, iccId and msisdn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "961157fd-17cd-426b-925c-c63da61aff4e",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response code is 4005\"] = jsonData.code === 4005;",
									"tests[\"message\"] = jsonData.message.has(\"Bad parameter combination\");",
									"tests[\"Error description\"] = jsonData.description.has(\"Ambiguous handler methods\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?publicKey={{pi_msisdn}}&iccId={{pi_iccId}}",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{pi_msisdn}}",
									"equals": true
								},
								{
									"key": "iccId",
									"value": "{{pi_iccId}}",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET contract by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e6da11e-3b7c-4711-a533-4a6851d8a821",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pi_all\"));",
									"var refDataFiltered = _.find(refData, {'productSpecification':{'id':'offer'}});",
									"tests[\"Validate data\"] = _.isEqual(jsonData,refDataFiltered);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{context_inventory}}/product/{{pi_contract_id}}",
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET BSCS service with parameters by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d827bd5-1f7d-43be-ae2a-f58eefa6ea19",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var refData = JSON.parse(postman.getEnvironmentVariable(\"reference_pi_all_withParams\"));",
									"var refDataFiltered = _.find(refData, {'id': postman.getEnvironmentVariable(\"pi_service_withParams_id\")});",
									"console.log(refDataFiltered)",
									"tests[\"Validate data\"] = _.isEqual(jsonData,refDataFiltered);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product/{{pi_service_withParams_id}}?withParameters=true",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product",
								"{{pi_service_withParams_id}}"
							],
							"query": [
								{
									"key": "withParameters",
									"value": "true",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET service by id: ERR, unknown BSCS service id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66ba50c4-3b70-42e1-9ac8-fef94958e7cf",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response code is 4040\"] = jsonData.code === 4040;",
									"tests[\"message\"] = jsonData.message.has(\"Not found\");",
									"tests[\"Error description\"] = jsonData.description.has(\"No product (service) found with id: \"+postman.getEnvironmentVariable(\"pi_contract_id\")+\"|A|\"+postman.getEnvironmentVariable(\"pi_unknown_service_id\"));",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{context_inventory}}/product/{{pi_contract_id}}|A|{{pi_unknown_service_id}}",
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET service by id: ERR, unknown service id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea77d7b0-e5f7-489c-98d2-627500429537",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response code is 4040\"] = jsonData.code === 4040;",
									"tests[\"message\"] = jsonData.message.has(\"Not found\");",
									"tests[\"Error description\"] = jsonData.description.has(\"No product found with id: \"+postman.getEnvironmentVariable(\"pi_unknown_service_id\"));",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "login",
								"value": "{{headers_login}}"
							},
							{
								"key": "password",
								"value": "{{headers_password}}"
							},
							{
								"key": "platform",
								"value": "{{headers_platform}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{context_inventory}}/product/{{pi_unknown_service_id}}",
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Ne pas tester",
			"item": [
				{
					"name": "Offer migration (update tariff plan)",
					"item": [
						{
							"name": "010_Err missing one required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4001\"] = jsonData.code === 4001;",
											"tests[\"Error message\"] = jsonData.message.has(\"Missing parameter\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Parameter orderItem.productOffering is missing, null or empty\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"orderItem\": [\r\n        {\r\n        \t\"id\":\"1\",\r\n            \"action\": \"migrate\",\r\n            \"product\": {\r\n\t            \"id\": \"1\",\r\n                \"productOffering\": {\r\n                    \"category\": \"offer\"\r\n                }\r\n            }\r\n        }\r\n    ],\r\n    \"channel\": {\r\n        \"name\": \"Nomad\"\r\n    }\r\n}\r\n"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						},
						{
							"name": "010_Err Unknown id for main offer / rate plan",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Error code is 4001\"] = jsonData.code === 4001;",
											"tests[\"Error message\"] = jsonData.message.has(\"Missing parameter\");",
											"tests[\"Error description\"] = jsonData.description.has(\"Parameter orderItem.id is missing, null or empty\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"orderItem\": [\r\n        {\r\n        \t\"id\":\"1\",\r\n            \"action\": \"migrate\",\r\n            \"productOffering\": {\r\n                \"id\": \"458\"\r\n            },\r\n            \"product\": {\r\n\t            \"id\": \"45872139548675\",\r\n                \"productOffering\": {\r\n                    \"category\": \"offer\"\r\n                }\r\n            }\r\n        }\r\n    ],\r\n    \"channel\": {\r\n        \"name\": \"Nomad\"\r\n    }\r\n}\r\n"
								},
								"url": "{{context_order}}/productOrder"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Preparation Use case appel ProductInventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var inventories = JSON.parse(responseBody);",
									"",
									"// Test s'il s'agit bien dun barring productOferring.id = '6'",
									"var barring = _.find(inventories, function(o) { return o.productOffering.id == postman.getEnvironmentVariable(\"pi_barringId\"); } );",
									"//var barring = _.find(inventories, function(o) { return o.productOffering.id == \"DDF\"; } );",
									"//console.log(\"barring\", barring);",
									"if(_.isEmpty(barring)){",
									"    tests['Barring Service Found'] = false;",
									"} else {",
									"    tests['Barring Service Found'] = true;",
									"    // Test si le product portant le barring est au status AttenteActivation",
									"    tests[\"Barring Statut is '\"+postman.getEnvironmentVariable(\"pi_status_AttenteActivation\")+\"'\"] =  barring.status === postman.getEnvironmentVariable(\"pi_status_AttenteActivation\");",
									"}",
									"",
									"// Recupere l'offre principale et test si son id est bien egal  == 28210659",
									"var offer = _.find(inventories, function(o) { return o.productOffering.category == 'offer'; } );",
									"//console.log(\"offer\", offer);",
									"if(_.isEmpty(offer)){",
									"    tests[\"id main offer is equal \"+postman.getEnvironmentVariable(\"po_offerIdForPI\")] = false;",
									"}else{",
									"    tests[\"id main offer is equal \"+postman.getEnvironmentVariable(\"po_offerIdForPI\")] = offer.id === postman.getEnvironmentVariable(\"po_offerIdForPI\");",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?publicKey=693786376&withParameters=true",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "693786376",
									"equals": true
								},
								{
									"key": "withParameters",
									"value": "true",
									"equals": true
								}
							]
						},
						"description": "Vérifie si le product retourné est elligible à l'activation"
					},
					"response": []
				},
				{
					"name": "Preparation Use case appel ProductInventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var inventories = JSON.parse(responseBody);",
									"",
									"// Test s'il s'agit bien dun barring productOferring.id = '6'",
									"var barring = _.find(inventories, function(o) { return o.productOffering.id == postman.getEnvironmentVariable(\"pi_barringId\"); } );",
									"//var barring = _.find(inventories, function(o) { return o.productOffering.id == \"DDF\"; } );",
									"//console.log(\"barring\", barring);",
									"if(_.isEmpty(barring)){",
									"    tests['Barring Service Found'] = false;",
									"} else {",
									"    tests['Barring Service Found'] = true;",
									"    // Test si le product portant le barring est au status AttenteActivation",
									"    tests[\"Barring Statut is '\"+postman.getEnvironmentVariable(\"pi_status_AttenteActivation\")+\"'\"] =  barring.status === postman.getEnvironmentVariable(\"pi_status_AttenteActivation\");",
									"}",
									"",
									"// Recupere l'offre principale et test si son id est bien egal  == 28210659",
									"var offer = _.find(inventories, function(o) { return o.productOffering.category == 'offer'; } );",
									"//console.log(\"offer\", offer);",
									"if(_.isEmpty(offer)){",
									"    tests[\"id main offer is equal \"+postman.getEnvironmentVariable(\"po_offerIdForPI\")] = false;",
									"}else{",
									"    tests[\"id main offer is equal \"+postman.getEnvironmentVariable(\"po_offerIdForPI\")] = offer.id === postman.getEnvironmentVariable(\"po_offerIdForPI\");",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{context_inventory}}/product?publicKey={{po_msisdnUpdate}}",
							"host": [
								"{{context_inventory}}"
							],
							"path": [
								"product"
							],
							"query": [
								{
									"key": "publicKey",
									"value": "{{po_msisdnUpdate}}",
									"equals": true
								}
							]
						},
						"description": "Vérifie si le product retourné est elligible à l'activation"
					},
					"response": []
				}
			]
		}
	]
}